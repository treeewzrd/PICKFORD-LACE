{"ast":null,"code":"/**\r\n * This function transforms a JS object `ObjMap<Promise<T>>` into\r\n * a `Promise<ObjMap<T>>`\r\n *\r\n * This is akin to bluebird's `Promise.props`, but implemented only using\r\n * `Promise.all` so it will work with any implementation of ES6 promises.\r\n */\nexport function promiseForObject(object) {\n  return Promise.all(Object.values(object)).then(resolvedValues => {\n    const resolvedObject = Object.create(null);\n    for (const [i, key] of Object.keys(object).entries()) {\n      resolvedObject[key] = resolvedValues[i];\n    }\n    return resolvedObject;\n  });\n}","map":{"version":3,"names":["promiseForObject","object","Promise","all","Object","values","then","resolvedValues","resolvedObject","create","i","key","keys","entries"],"sources":["C:/bootcamp/PICKFORD---LACE/client/node_modules/graphql/jsutils/promiseForObject.mjs"],"sourcesContent":["/**\r\n * This function transforms a JS object `ObjMap<Promise<T>>` into\r\n * a `Promise<ObjMap<T>>`\r\n *\r\n * This is akin to bluebird's `Promise.props`, but implemented only using\r\n * `Promise.all` so it will work with any implementation of ES6 promises.\r\n */\r\nexport function promiseForObject(object) {\r\n  return Promise.all(Object.values(object)).then((resolvedValues) => {\r\n    const resolvedObject = Object.create(null);\r\n\r\n    for (const [i, key] of Object.keys(object).entries()) {\r\n      resolvedObject[key] = resolvedValues[i];\r\n    }\r\n\r\n    return resolvedObject;\r\n  });\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,gBAAgBA,CAACC,MAAM,EAAE;EACvC,OAAOC,OAAO,CAACC,GAAG,CAACC,MAAM,CAACC,MAAM,CAACJ,MAAM,CAAC,CAAC,CAACK,IAAI,CAAEC,cAAc,IAAK;IACjE,MAAMC,cAAc,GAAGJ,MAAM,CAACK,MAAM,CAAC,IAAI,CAAC;IAE1C,KAAK,MAAM,CAACC,CAAC,EAAEC,GAAG,CAAC,IAAIP,MAAM,CAACQ,IAAI,CAACX,MAAM,CAAC,CAACY,OAAO,CAAC,CAAC,EAAE;MACpDL,cAAc,CAACG,GAAG,CAAC,GAAGJ,cAAc,CAACG,CAAC,CAAC;IACzC;IAEA,OAAOF,cAAc;EACvB,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}