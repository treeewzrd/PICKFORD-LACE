{"ast":null,"code":"import { Kind } from '../language/kinds.mjs';\nimport { isAbstractType } from '../type/definition.mjs';\nimport { GraphQLIncludeDirective, GraphQLSkipDirective } from '../type/directives.mjs';\nimport { typeFromAST } from '../utilities/typeFromAST.mjs';\nimport { getDirectiveValues } from './values.mjs';\n/**\r\n * Given a selectionSet, collects all of the fields and returns them.\r\n *\r\n * CollectFields requires the \"runtime type\" of an object. For a field that\r\n * returns an Interface or Union type, the \"runtime type\" will be the actual\r\n * object type returned by that field.\r\n *\r\n * @internal\r\n */\n\nexport function collectFields(schema, fragments, variableValues, runtimeType, selectionSet) {\n  const fields = new Map();\n  collectFieldsImpl(schema, fragments, variableValues, runtimeType, selectionSet, fields, new Set());\n  return fields;\n}\n/**\r\n * Given an array of field nodes, collects all of the subfields of the passed\r\n * in fields, and returns them at the end.\r\n *\r\n * CollectSubFields requires the \"return type\" of an object. For a field that\r\n * returns an Interface or Union type, the \"return type\" will be the actual\r\n * object type returned by that field.\r\n *\r\n * @internal\r\n */\n\nexport function collectSubfields(schema, fragments, variableValues, returnType, fieldNodes) {\n  const subFieldNodes = new Map();\n  const visitedFragmentNames = new Set();\n  for (const node of fieldNodes) {\n    if (node.selectionSet) {\n      collectFieldsImpl(schema, fragments, variableValues, returnType, node.selectionSet, subFieldNodes, visitedFragmentNames);\n    }\n  }\n  return subFieldNodes;\n}\nfunction collectFieldsImpl(schema, fragments, variableValues, runtimeType, selectionSet, fields, visitedFragmentNames) {\n  for (const selection of selectionSet.selections) {\n    switch (selection.kind) {\n      case Kind.FIELD:\n        {\n          if (!shouldIncludeNode(variableValues, selection)) {\n            continue;\n          }\n          const name = getFieldEntryKey(selection);\n          const fieldList = fields.get(name);\n          if (fieldList !== undefined) {\n            fieldList.push(selection);\n          } else {\n            fields.set(name, [selection]);\n          }\n          break;\n        }\n      case Kind.INLINE_FRAGMENT:\n        {\n          if (!shouldIncludeNode(variableValues, selection) || !doesFragmentConditionMatch(schema, selection, runtimeType)) {\n            continue;\n          }\n          collectFieldsImpl(schema, fragments, variableValues, runtimeType, selection.selectionSet, fields, visitedFragmentNames);\n          break;\n        }\n      case Kind.FRAGMENT_SPREAD:\n        {\n          const fragName = selection.name.value;\n          if (visitedFragmentNames.has(fragName) || !shouldIncludeNode(variableValues, selection)) {\n            continue;\n          }\n          visitedFragmentNames.add(fragName);\n          const fragment = fragments[fragName];\n          if (!fragment || !doesFragmentConditionMatch(schema, fragment, runtimeType)) {\n            continue;\n          }\n          collectFieldsImpl(schema, fragments, variableValues, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);\n          break;\n        }\n    }\n  }\n}\n/**\r\n * Determines if a field should be included based on the `@include` and `@skip`\r\n * directives, where `@skip` has higher precedence than `@include`.\r\n */\n\nfunction shouldIncludeNode(variableValues, node) {\n  const skip = getDirectiveValues(GraphQLSkipDirective, node, variableValues);\n  if ((skip === null || skip === void 0 ? void 0 : skip.if) === true) {\n    return false;\n  }\n  const include = getDirectiveValues(GraphQLIncludeDirective, node, variableValues);\n  if ((include === null || include === void 0 ? void 0 : include.if) === false) {\n    return false;\n  }\n  return true;\n}\n/**\r\n * Determines if a fragment is applicable to the given type.\r\n */\n\nfunction doesFragmentConditionMatch(schema, fragment, type) {\n  const typeConditionNode = fragment.typeCondition;\n  if (!typeConditionNode) {\n    return true;\n  }\n  const conditionalType = typeFromAST(schema, typeConditionNode);\n  if (conditionalType === type) {\n    return true;\n  }\n  if (isAbstractType(conditionalType)) {\n    return schema.isSubType(conditionalType, type);\n  }\n  return false;\n}\n/**\r\n * Implements the logic to compute the key of a given field's entry\r\n */\n\nfunction getFieldEntryKey(node) {\n  return node.alias ? node.alias.value : node.name.value;\n}","map":{"version":3,"names":["Kind","isAbstractType","GraphQLIncludeDirective","GraphQLSkipDirective","typeFromAST","getDirectiveValues","collectFields","schema","fragments","variableValues","runtimeType","selectionSet","fields","Map","collectFieldsImpl","Set","collectSubfields","returnType","fieldNodes","subFieldNodes","visitedFragmentNames","node","selection","selections","kind","FIELD","shouldIncludeNode","name","getFieldEntryKey","fieldList","get","undefined","push","set","INLINE_FRAGMENT","doesFragmentConditionMatch","FRAGMENT_SPREAD","fragName","value","has","add","fragment","skip","if","include","type","typeConditionNode","typeCondition","conditionalType","isSubType","alias"],"sources":["C:/bootcamp/PICKFORD---LACE/client/node_modules/graphql/execution/collectFields.mjs"],"sourcesContent":["import { Kind } from '../language/kinds.mjs';\r\nimport { isAbstractType } from '../type/definition.mjs';\r\nimport {\r\n  GraphQLIncludeDirective,\r\n  GraphQLSkipDirective,\r\n} from '../type/directives.mjs';\r\nimport { typeFromAST } from '../utilities/typeFromAST.mjs';\r\nimport { getDirectiveValues } from './values.mjs';\r\n/**\r\n * Given a selectionSet, collects all of the fields and returns them.\r\n *\r\n * CollectFields requires the \"runtime type\" of an object. For a field that\r\n * returns an Interface or Union type, the \"runtime type\" will be the actual\r\n * object type returned by that field.\r\n *\r\n * @internal\r\n */\r\n\r\nexport function collectFields(\r\n  schema,\r\n  fragments,\r\n  variableValues,\r\n  runtimeType,\r\n  selectionSet,\r\n) {\r\n  const fields = new Map();\r\n  collectFieldsImpl(\r\n    schema,\r\n    fragments,\r\n    variableValues,\r\n    runtimeType,\r\n    selectionSet,\r\n    fields,\r\n    new Set(),\r\n  );\r\n  return fields;\r\n}\r\n/**\r\n * Given an array of field nodes, collects all of the subfields of the passed\r\n * in fields, and returns them at the end.\r\n *\r\n * CollectSubFields requires the \"return type\" of an object. For a field that\r\n * returns an Interface or Union type, the \"return type\" will be the actual\r\n * object type returned by that field.\r\n *\r\n * @internal\r\n */\r\n\r\nexport function collectSubfields(\r\n  schema,\r\n  fragments,\r\n  variableValues,\r\n  returnType,\r\n  fieldNodes,\r\n) {\r\n  const subFieldNodes = new Map();\r\n  const visitedFragmentNames = new Set();\r\n\r\n  for (const node of fieldNodes) {\r\n    if (node.selectionSet) {\r\n      collectFieldsImpl(\r\n        schema,\r\n        fragments,\r\n        variableValues,\r\n        returnType,\r\n        node.selectionSet,\r\n        subFieldNodes,\r\n        visitedFragmentNames,\r\n      );\r\n    }\r\n  }\r\n\r\n  return subFieldNodes;\r\n}\r\n\r\nfunction collectFieldsImpl(\r\n  schema,\r\n  fragments,\r\n  variableValues,\r\n  runtimeType,\r\n  selectionSet,\r\n  fields,\r\n  visitedFragmentNames,\r\n) {\r\n  for (const selection of selectionSet.selections) {\r\n    switch (selection.kind) {\r\n      case Kind.FIELD: {\r\n        if (!shouldIncludeNode(variableValues, selection)) {\r\n          continue;\r\n        }\r\n\r\n        const name = getFieldEntryKey(selection);\r\n        const fieldList = fields.get(name);\r\n\r\n        if (fieldList !== undefined) {\r\n          fieldList.push(selection);\r\n        } else {\r\n          fields.set(name, [selection]);\r\n        }\r\n\r\n        break;\r\n      }\r\n\r\n      case Kind.INLINE_FRAGMENT: {\r\n        if (\r\n          !shouldIncludeNode(variableValues, selection) ||\r\n          !doesFragmentConditionMatch(schema, selection, runtimeType)\r\n        ) {\r\n          continue;\r\n        }\r\n\r\n        collectFieldsImpl(\r\n          schema,\r\n          fragments,\r\n          variableValues,\r\n          runtimeType,\r\n          selection.selectionSet,\r\n          fields,\r\n          visitedFragmentNames,\r\n        );\r\n        break;\r\n      }\r\n\r\n      case Kind.FRAGMENT_SPREAD: {\r\n        const fragName = selection.name.value;\r\n\r\n        if (\r\n          visitedFragmentNames.has(fragName) ||\r\n          !shouldIncludeNode(variableValues, selection)\r\n        ) {\r\n          continue;\r\n        }\r\n\r\n        visitedFragmentNames.add(fragName);\r\n        const fragment = fragments[fragName];\r\n\r\n        if (\r\n          !fragment ||\r\n          !doesFragmentConditionMatch(schema, fragment, runtimeType)\r\n        ) {\r\n          continue;\r\n        }\r\n\r\n        collectFieldsImpl(\r\n          schema,\r\n          fragments,\r\n          variableValues,\r\n          runtimeType,\r\n          fragment.selectionSet,\r\n          fields,\r\n          visitedFragmentNames,\r\n        );\r\n        break;\r\n      }\r\n    }\r\n  }\r\n}\r\n/**\r\n * Determines if a field should be included based on the `@include` and `@skip`\r\n * directives, where `@skip` has higher precedence than `@include`.\r\n */\r\n\r\nfunction shouldIncludeNode(variableValues, node) {\r\n  const skip = getDirectiveValues(GraphQLSkipDirective, node, variableValues);\r\n\r\n  if ((skip === null || skip === void 0 ? void 0 : skip.if) === true) {\r\n    return false;\r\n  }\r\n\r\n  const include = getDirectiveValues(\r\n    GraphQLIncludeDirective,\r\n    node,\r\n    variableValues,\r\n  );\r\n\r\n  if (\r\n    (include === null || include === void 0 ? void 0 : include.if) === false\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n/**\r\n * Determines if a fragment is applicable to the given type.\r\n */\r\n\r\nfunction doesFragmentConditionMatch(schema, fragment, type) {\r\n  const typeConditionNode = fragment.typeCondition;\r\n\r\n  if (!typeConditionNode) {\r\n    return true;\r\n  }\r\n\r\n  const conditionalType = typeFromAST(schema, typeConditionNode);\r\n\r\n  if (conditionalType === type) {\r\n    return true;\r\n  }\r\n\r\n  if (isAbstractType(conditionalType)) {\r\n    return schema.isSubType(conditionalType, type);\r\n  }\r\n\r\n  return false;\r\n}\r\n/**\r\n * Implements the logic to compute the key of a given field's entry\r\n */\r\n\r\nfunction getFieldEntryKey(node) {\r\n  return node.alias ? node.alias.value : node.name.value;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}