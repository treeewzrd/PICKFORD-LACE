{"ast":null,"code":"export function pluralize(name,count){if(count===1){return name;}return name+'s';}export function idbPromise(storeName,method,object){return new Promise((resolve,reject)=>{// open connection to the database\nconst request=window.indexedDB.open('shop-shop',1);// create variables to hold reference to the database, transaction (tx), and object store\nlet db,tx,store;// if version has changed (or if this is the first time using the database), run this method and create the three object stores \nrequest.onupgradeneeded=function(e){const db=request.result;// create object store for each type of data and set \"primary\" key index to be the `_id` of the data\ndb.createObjectStore('products',{keyPath:'_id'});db.createObjectStore('categories',{keyPath:'_id'});db.createObjectStore('cart',{keyPath:'_id'});};// handle any errors with connecting\nrequest.onerror=function(e){console.log('There was an error');};// on database open success\nrequest.onsuccess=function(e){// save a reference of the database to the `db` variable\ndb=request.result;// open a transaction do whatever we pass into `storeName` (must match one of the object store names)\ntx=db.transaction(storeName,'readwrite');// save a reference to that object store\nstore=tx.objectStore(storeName);// if there's any errors, let us know\ndb.onerror=function(e){console.log('error',e);};switch(method){case'put':store.put(object);resolve(object);break;case'get':const all=store.getAll();all.onsuccess=function(){resolve(all.result);};break;case'delete':store.delete(object._id);resolve(true);break;default:console.log('No valid method');resolve(false);break;}// when the transaction is complete, close the connection\ntx.oncomplete=function(){db.close();};};});}","map":{"version":3,"names":["pluralize","name","count","idbPromise","storeName","method","object","Promise","resolve","reject","request","window","indexedDB","open","db","tx","store","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close"],"sources":["C:/Bootcamp/mern-graphql-ecommerce/client/src/utils/helpers.js"],"sourcesContent":["export function pluralize(name, count) {\r\n    if (count === 1) {\r\n      return name;\r\n    }\r\n    return name + 's';\r\n  }\r\n  \r\n  export function idbPromise(storeName, method, object) {\r\n    return new Promise((resolve, reject) => {\r\n      // open connection to the database\r\n      const request = window.indexedDB.open('shop-shop', 1);\r\n      \r\n      // create variables to hold reference to the database, transaction (tx), and object store\r\n      let db, tx, store;\r\n      \r\n      // if version has changed (or if this is the first time using the database), run this method and create the three object stores \r\n      request.onupgradeneeded = function(e) {\r\n        const db = request.result;\r\n        // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\r\n        db.createObjectStore('products', { keyPath: '_id' });\r\n        db.createObjectStore('categories', { keyPath: '_id' });\r\n        db.createObjectStore('cart', { keyPath: '_id' });\r\n      };\r\n      \r\n      // handle any errors with connecting\r\n      request.onerror = function(e) {\r\n        console.log('There was an error');\r\n      };\r\n      \r\n      // on database open success\r\n      request.onsuccess = function(e) {\r\n        // save a reference of the database to the `db` variable\r\n        db = request.result;\r\n        // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\r\n        tx = db.transaction(storeName, 'readwrite');\r\n        // save a reference to that object store\r\n        store = tx.objectStore(storeName);\r\n        \r\n        // if there's any errors, let us know\r\n        db.onerror = function(e) {\r\n          console.log('error', e);\r\n        };\r\n        \r\n        switch (method) {\r\n          case 'put':\r\n            store.put(object);\r\n            resolve(object);\r\n            break;\r\n          case 'get':\r\n            const all = store.getAll();\r\n            all.onsuccess = function() {\r\n              resolve(all.result);\r\n            };\r\n            break;\r\n          case 'delete':\r\n            store.delete(object._id);\r\n            resolve(true);\r\n            break;\r\n          default:\r\n            console.log('No valid method');\r\n            resolve(false);\r\n            break;\r\n        }\r\n        \r\n        // when the transaction is complete, close the connection\r\n        tx.oncomplete = function() {\r\n          db.close();\r\n        };\r\n      };\r\n    });\r\n  }\r\n  "],"mappings":"AAAA,MAAO,SAAS,CAAAA,SAASA,CAACC,IAAI,CAAEC,KAAK,CAAE,CACnC,GAAIA,KAAK,GAAK,CAAC,CAAE,CACf,MAAO,CAAAD,IAAI,CACb,CACA,MAAO,CAAAA,IAAI,CAAG,GAAG,CACnB,CAEA,MAAO,SAAS,CAAAE,UAAUA,CAACC,SAAS,CAAEC,MAAM,CAAEC,MAAM,CAAE,CACpD,MAAO,IAAI,CAAAC,OAAO,CAAC,CAACC,OAAO,CAAEC,MAAM,GAAK,CACtC;AACA,KAAM,CAAAC,OAAO,CAAGC,MAAM,CAACC,SAAS,CAACC,IAAI,CAAC,WAAW,CAAE,CAAC,CAAC,CAErD;AACA,GAAI,CAAAC,EAAE,CAAEC,EAAE,CAAEC,KAAK,CAEjB;AACAN,OAAO,CAACO,eAAe,CAAG,SAASC,CAAC,CAAE,CACpC,KAAM,CAAAJ,EAAE,CAAGJ,OAAO,CAACS,MAAM,CACzB;AACAL,EAAE,CAACM,iBAAiB,CAAC,UAAU,CAAE,CAAEC,OAAO,CAAE,KAAM,CAAC,CAAC,CACpDP,EAAE,CAACM,iBAAiB,CAAC,YAAY,CAAE,CAAEC,OAAO,CAAE,KAAM,CAAC,CAAC,CACtDP,EAAE,CAACM,iBAAiB,CAAC,MAAM,CAAE,CAAEC,OAAO,CAAE,KAAM,CAAC,CAAC,CAClD,CAAC,CAED;AACAX,OAAO,CAACY,OAAO,CAAG,SAASJ,CAAC,CAAE,CAC5BK,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC,CACnC,CAAC,CAED;AACAd,OAAO,CAACe,SAAS,CAAG,SAASP,CAAC,CAAE,CAC9B;AACAJ,EAAE,CAAGJ,OAAO,CAACS,MAAM,CACnB;AACAJ,EAAE,CAAGD,EAAE,CAACY,WAAW,CAACtB,SAAS,CAAE,WAAW,CAAC,CAC3C;AACAY,KAAK,CAAGD,EAAE,CAACY,WAAW,CAACvB,SAAS,CAAC,CAEjC;AACAU,EAAE,CAACQ,OAAO,CAAG,SAASJ,CAAC,CAAE,CACvBK,OAAO,CAACC,GAAG,CAAC,OAAO,CAAEN,CAAC,CAAC,CACzB,CAAC,CAED,OAAQb,MAAM,EACZ,IAAK,KAAK,CACRW,KAAK,CAACY,GAAG,CAACtB,MAAM,CAAC,CACjBE,OAAO,CAACF,MAAM,CAAC,CACf,MACF,IAAK,KAAK,CACR,KAAM,CAAAuB,GAAG,CAAGb,KAAK,CAACc,MAAM,CAAC,CAAC,CAC1BD,GAAG,CAACJ,SAAS,CAAG,UAAW,CACzBjB,OAAO,CAACqB,GAAG,CAACV,MAAM,CAAC,CACrB,CAAC,CACD,MACF,IAAK,QAAQ,CACXH,KAAK,CAACe,MAAM,CAACzB,MAAM,CAAC0B,GAAG,CAAC,CACxBxB,OAAO,CAAC,IAAI,CAAC,CACb,MACF,QACEe,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC,CAC9BhB,OAAO,CAAC,KAAK,CAAC,CACd,MACJ,CAEA;AACAO,EAAE,CAACkB,UAAU,CAAG,UAAW,CACzBnB,EAAE,CAACoB,KAAK,CAAC,CAAC,CACZ,CAAC,CACH,CAAC,CACH,CAAC,CAAC,CACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}