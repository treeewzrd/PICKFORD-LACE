{"ast":null,"code":"import * as React from \"rehackt\";\nimport { assertWrappedQueryRef, getWrappedPromise, unwrapQueryRef, updateWrappedQueryRef, wrapQueryRef } from \"../internal/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { wrapHook } from \"./internal/index.js\";\n/**\r\n * A React hook that returns a `refetch` and `fetchMore` function for a given\r\n * `queryRef`.\r\n *\r\n * This is useful to get access to handlers for a `queryRef` that was created by\r\n * `createQueryPreloader` or when the handlers for a `queryRef` produced in\r\n * a different component are inaccessible.\r\n *\r\n * @example\r\n * ```tsx\r\n * const MyComponent({ queryRef }) {\r\n *   const { refetch, fetchMore } = useQueryRefHandlers(queryRef);\r\n *\r\n *   // ...\r\n * }\r\n * ```\r\n * @since 3.9.0\r\n * @param queryRef - A `QueryRef` returned from `useBackgroundQuery`, `useLoadableQuery`, or `createQueryPreloader`.\r\n */\nexport function useQueryRefHandlers(queryRef) {\n  var unwrapped = unwrapQueryRef(queryRef);\n  var clientOrObsQuery = useApolloClient(unwrapped ?\n  // passing an `ObservableQuery` is not supported by the types, but it will\n  // return any truthy value that is passed in as an override so we cast the result\n  unwrapped[\"observable\"] : undefined);\n  return wrapHook(\"useQueryRefHandlers\",\n  // eslint-disable-next-line react-compiler/react-compiler\n  useQueryRefHandlers_, clientOrObsQuery)(queryRef);\n}\nfunction useQueryRefHandlers_(queryRef) {\n  assertWrappedQueryRef(queryRef);\n  var _a = React.useState(queryRef),\n    previousQueryRef = _a[0],\n    setPreviousQueryRef = _a[1];\n  var _b = React.useState(queryRef),\n    wrappedQueryRef = _b[0],\n    setWrappedQueryRef = _b[1];\n  var internalQueryRef = unwrapQueryRef(queryRef);\n  // To ensure we can support React transitions, this hook needs to manage the\n  // queryRef state and apply React's state value immediately to the existing\n  // queryRef since this hook doesn't return the queryRef directly\n  if (previousQueryRef !== queryRef) {\n    setPreviousQueryRef(queryRef);\n    setWrappedQueryRef(queryRef);\n  } else {\n    updateWrappedQueryRef(queryRef, getWrappedPromise(wrappedQueryRef));\n  }\n  var refetch = React.useCallback(function (variables) {\n    var promise = internalQueryRef.refetch(variables);\n    setWrappedQueryRef(wrapQueryRef(internalQueryRef));\n    return promise;\n  }, [internalQueryRef]);\n  var fetchMore = React.useCallback(function (options) {\n    var promise = internalQueryRef.fetchMore(options);\n    setWrappedQueryRef(wrapQueryRef(internalQueryRef));\n    return promise;\n  }, [internalQueryRef]);\n  return {\n    refetch: refetch,\n    fetchMore: fetchMore,\n    // TODO: The internalQueryRef doesn't have TVariables' type information so we have to cast it here\n    subscribeToMore: internalQueryRef.observable.subscribeToMore\n  };\n}","map":{"version":3,"names":["React","assertWrappedQueryRef","getWrappedPromise","unwrapQueryRef","updateWrappedQueryRef","wrapQueryRef","useApolloClient","wrapHook","useQueryRefHandlers","queryRef","unwrapped","clientOrObsQuery","undefined","useQueryRefHandlers_","_a","useState","previousQueryRef","setPreviousQueryRef","_b","wrappedQueryRef","setWrappedQueryRef","internalQueryRef","refetch","useCallback","variables","promise","fetchMore","options","subscribeToMore","observable"],"sources":["C:\\bootcamp\\PICKFORD---LACE\\client\\node_modules\\@apollo\\src\\react\\hooks\\useQueryRefHandlers.ts"],"sourcesContent":["import * as React from \"rehackt\";\nimport {\n  assertWrappedQueryRef,\n  getWrappedPromise,\n  unwrapQueryRef,\n  updateWrappedQueryRef,\n  wrapQueryRef,\n} from \"../internal/index.js\";\nimport type { QueryRef } from \"../internal/index.js\";\nimport type { OperationVariables } from \"../../core/types.js\";\nimport type { SubscribeToMoreFunction } from \"../../core/watchQueryOptions.js\";\nimport type { RefetchFunction, FetchMoreFunction } from \"./useSuspenseQuery.js\";\nimport type { FetchMoreQueryOptions } from \"../../core/watchQueryOptions.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { wrapHook } from \"./internal/index.js\";\nimport type { ApolloClient } from \"../../core/ApolloClient.js\";\nimport type { ObservableQuery } from \"../../core/ObservableQuery.js\";\n\nexport interface UseQueryRefHandlersResult<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n> {\n  /** {@inheritDoc @apollo/client!ObservableQuery#refetch:member(1)} */\n  refetch: RefetchFunction<TData, TVariables>;\n  /** {@inheritDoc @apollo/client!ObservableQuery#fetchMore:member(1)} */\n  fetchMore: FetchMoreFunction<TData, TVariables>;\n  /** {@inheritDoc @apollo/client!ObservableQuery#subscribeToMore:member(1)} */\n  subscribeToMore: SubscribeToMoreFunction<TData, TVariables>;\n}\n\n/**\n * A React hook that returns a `refetch` and `fetchMore` function for a given\n * `queryRef`.\n *\n * This is useful to get access to handlers for a `queryRef` that was created by\n * `createQueryPreloader` or when the handlers for a `queryRef` produced in\n * a different component are inaccessible.\n *\n * @example\n * ```tsx\n * const MyComponent({ queryRef }) {\n *   const { refetch, fetchMore } = useQueryRefHandlers(queryRef);\n *\n *   // ...\n * }\n * ```\n * @since 3.9.0\n * @param queryRef - A `QueryRef` returned from `useBackgroundQuery`, `useLoadableQuery`, or `createQueryPreloader`.\n */\nexport function useQueryRefHandlers<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  queryRef: QueryRef<TData, TVariables>\n): UseQueryRefHandlersResult<TData, TVariables> {\n  const unwrapped = unwrapQueryRef(queryRef);\n  const clientOrObsQuery = useApolloClient(\n    unwrapped ?\n      // passing an `ObservableQuery` is not supported by the types, but it will\n      // return any truthy value that is passed in as an override so we cast the result\n      (unwrapped[\"observable\"] as any)\n    : undefined\n  ) as ApolloClient<any> | ObservableQuery<TData>;\n\n  return wrapHook(\n    \"useQueryRefHandlers\",\n    // eslint-disable-next-line react-compiler/react-compiler\n    useQueryRefHandlers_,\n    clientOrObsQuery\n  )(queryRef);\n}\n\nfunction useQueryRefHandlers_<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  queryRef: QueryRef<TData, TVariables>\n): UseQueryRefHandlersResult<TData, TVariables> {\n  assertWrappedQueryRef(queryRef);\n  const [previousQueryRef, setPreviousQueryRef] = React.useState(queryRef);\n  const [wrappedQueryRef, setWrappedQueryRef] = React.useState(queryRef);\n  const internalQueryRef = unwrapQueryRef(queryRef);\n\n  // To ensure we can support React transitions, this hook needs to manage the\n  // queryRef state and apply React's state value immediately to the existing\n  // queryRef since this hook doesn't return the queryRef directly\n  if (previousQueryRef !== queryRef) {\n    setPreviousQueryRef(queryRef);\n    setWrappedQueryRef(queryRef);\n  } else {\n    updateWrappedQueryRef(queryRef, getWrappedPromise(wrappedQueryRef));\n  }\n\n  const refetch: RefetchFunction<TData, TVariables> = React.useCallback(\n    (variables) => {\n      const promise = internalQueryRef.refetch(variables);\n\n      setWrappedQueryRef(wrapQueryRef(internalQueryRef));\n\n      return promise;\n    },\n    [internalQueryRef]\n  );\n\n  const fetchMore: FetchMoreFunction<TData, TVariables> = React.useCallback(\n    (options) => {\n      const promise = internalQueryRef.fetchMore(\n        options as FetchMoreQueryOptions<any, any>\n      );\n\n      setWrappedQueryRef(wrapQueryRef(internalQueryRef));\n\n      return promise;\n    },\n    [internalQueryRef]\n  );\n\n  return {\n    refetch,\n    fetchMore,\n    // TODO: The internalQueryRef doesn't have TVariables' type information so we have to cast it here\n    subscribeToMore: internalQueryRef.observable\n      .subscribeToMore as SubscribeToMoreFunction<TData, TVariables>,\n  };\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,SAAS;AAChC,SACEC,qBAAqB,EACrBC,iBAAiB,EACjBC,cAAc,EACdC,qBAAqB,EACrBC,YAAY,QACP,sBAAsB;AAM7B,SAASC,eAAe,QAAQ,sBAAsB;AACtD,SAASC,QAAQ,QAAQ,qBAAqB;AAgB9C;;;;;;;;;;;;;;;;;;;AAmBA,OAAM,SAAUC,mBAAmBA,CAIjCC,QAAqC;EAErC,IAAMC,SAAS,GAAGP,cAAc,CAACM,QAAQ,CAAC;EAC1C,IAAME,gBAAgB,GAAGL,eAAe,CACtCI,SAAS;EACP;EACA;EACCA,SAAS,CAAC,YAAY,CAAS,GAChCE,SAAS,CACkC;EAE/C,OAAOL,QAAQ,CACb,qBAAqB;EACrB;EACAM,oBAAoB,EACpBF,gBAAgB,CACjB,CAACF,QAAQ,CAAC;AACb;AAEA,SAASI,oBAAoBA,CAI3BJ,QAAqC;EAErCR,qBAAqB,CAACQ,QAAQ,CAAC;EACzB,IAAAK,EAAA,GAA0Cd,KAAK,CAACe,QAAQ,CAACN,QAAQ,CAAC;IAAjEO,gBAAgB,GAAAF,EAAA;IAAEG,mBAAmB,GAAAH,EAAA,GAA4B;EAClE,IAAAI,EAAA,GAAwClB,KAAK,CAACe,QAAQ,CAACN,QAAQ,CAAC;IAA/DU,eAAe,GAAAD,EAAA;IAAEE,kBAAkB,GAAAF,EAAA,GAA4B;EACtE,IAAMG,gBAAgB,GAAGlB,cAAc,CAACM,QAAQ,CAAC;EAEjD;EACA;EACA;EACA,IAAIO,gBAAgB,KAAKP,QAAQ,EAAE;IACjCQ,mBAAmB,CAACR,QAAQ,CAAC;IAC7BW,kBAAkB,CAACX,QAAQ,CAAC;EAC9B,CAAC,MAAM;IACLL,qBAAqB,CAACK,QAAQ,EAAEP,iBAAiB,CAACiB,eAAe,CAAC,CAAC;EACrE;EAEA,IAAMG,OAAO,GAAuCtB,KAAK,CAACuB,WAAW,CACnE,UAACC,SAAS;IACR,IAAMC,OAAO,GAAGJ,gBAAgB,CAACC,OAAO,CAACE,SAAS,CAAC;IAEnDJ,kBAAkB,CAACf,YAAY,CAACgB,gBAAgB,CAAC,CAAC;IAElD,OAAOI,OAAO;EAChB,CAAC,EACD,CAACJ,gBAAgB,CAAC,CACnB;EAED,IAAMK,SAAS,GAAyC1B,KAAK,CAACuB,WAAW,CACvE,UAACI,OAAO;IACN,IAAMF,OAAO,GAAGJ,gBAAgB,CAACK,SAAS,CACxCC,OAA0C,CAC3C;IAEDP,kBAAkB,CAACf,YAAY,CAACgB,gBAAgB,CAAC,CAAC;IAElD,OAAOI,OAAO;EAChB,CAAC,EACD,CAACJ,gBAAgB,CAAC,CACnB;EAED,OAAO;IACLC,OAAO,EAAAA,OAAA;IACPI,SAAS,EAAAA,SAAA;IACT;IACAE,eAAe,EAAEP,gBAAgB,CAACQ,UAAU,CACzCD;GACJ;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}