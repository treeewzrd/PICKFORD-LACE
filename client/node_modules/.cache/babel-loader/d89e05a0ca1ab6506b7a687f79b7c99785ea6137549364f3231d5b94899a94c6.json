{"ast":null,"code":"import { Kind } from \"graphql\";\nimport { MapImpl, SetImpl, warnOnImproperCacheImplementation } from \"./utils.js\";\nimport { invariant } from \"../utilities/globals/index.js\";\nimport equal from \"@wry/equality\";\nimport { maskDefinition } from \"./maskDefinition.js\";\nimport { createFragmentMap, getFragmentDefinitions } from \"../utilities/index.js\";\n/** @internal */\nexport function maskFragment(data, document, cache, fragmentName) {\n  if (!cache.fragmentMatches) {\n    if (globalThis.__DEV__ !== false) {\n      warnOnImproperCacheImplementation();\n    }\n    return data;\n  }\n  var fragments = document.definitions.filter(function (node) {\n    return node.kind === Kind.FRAGMENT_DEFINITION;\n  });\n  if (typeof fragmentName === \"undefined\") {\n    invariant(fragments.length === 1, 49, fragments.length);\n    fragmentName = fragments[0].name.value;\n  }\n  var fragment = fragments.find(function (fragment) {\n    return fragment.name.value === fragmentName;\n  });\n  invariant(!!fragment, 50, fragmentName);\n  if (data == null) {\n    // Maintain the original `null` or `undefined` value\n    return data;\n  }\n  if (equal(data, {})) {\n    // Return early and skip the masking algorithm if we don't have any data\n    // yet. This can happen when cache.diff returns an empty object which is\n    // used from watchFragment.\n    return data;\n  }\n  return maskDefinition(data, fragment.selectionSet, {\n    operationType: \"fragment\",\n    operationName: fragment.name.value,\n    fragmentMap: createFragmentMap(getFragmentDefinitions(document)),\n    cache: cache,\n    mutableTargets: new MapImpl(),\n    knownChanged: new SetImpl()\n  });\n}","map":{"version":3,"names":["Kind","MapImpl","SetImpl","warnOnImproperCacheImplementation","invariant","equal","maskDefinition","createFragmentMap","getFragmentDefinitions","maskFragment","data","document","cache","fragmentName","fragmentMatches","globalThis","__DEV__","fragments","definitions","filter","node","kind","FRAGMENT_DEFINITION","length","name","value","fragment","find","selectionSet","operationType","operationName","fragmentMap","mutableTargets","knownChanged"],"sources":["C:\\bootcamp\\PICKFORD---LACE\\client\\node_modules\\@apollo\\src\\masking\\maskFragment.ts"],"sourcesContent":["import { Kind } from \"graphql\";\nimport type { FragmentDefinitionNode } from \"graphql\";\nimport type {\n  ApolloCache,\n  DocumentNode,\n  TypedDocumentNode,\n} from \"../core/index.js\";\nimport {\n  MapImpl,\n  SetImpl,\n  warnOnImproperCacheImplementation,\n} from \"./utils.js\";\nimport { invariant } from \"../utilities/globals/index.js\";\nimport equal from \"@wry/equality\";\nimport { maskDefinition } from \"./maskDefinition.js\";\nimport {\n  createFragmentMap,\n  getFragmentDefinitions,\n} from \"../utilities/index.js\";\n\n/** @internal */\nexport function maskFragment<TData = unknown>(\n  data: TData,\n  document: TypedDocumentNode<TData> | DocumentNode,\n  cache: ApolloCache<unknown>,\n  fragmentName?: string\n): TData {\n  if (!cache.fragmentMatches) {\n    if (__DEV__) {\n      warnOnImproperCacheImplementation();\n    }\n\n    return data;\n  }\n\n  const fragments = document.definitions.filter(\n    (node): node is FragmentDefinitionNode =>\n      node.kind === Kind.FRAGMENT_DEFINITION\n  );\n\n  if (typeof fragmentName === \"undefined\") {\n    invariant(\n      fragments.length === 1,\n      `Found %s fragments. \\`fragmentName\\` must be provided when there is not exactly 1 fragment.`,\n      fragments.length\n    );\n    fragmentName = fragments[0].name.value;\n  }\n\n  const fragment = fragments.find(\n    (fragment) => fragment.name.value === fragmentName\n  );\n\n  invariant(\n    !!fragment,\n    `Could not find fragment with name \"%s\".`,\n    fragmentName\n  );\n\n  if (data == null) {\n    // Maintain the original `null` or `undefined` value\n    return data;\n  }\n\n  if (equal(data, {})) {\n    // Return early and skip the masking algorithm if we don't have any data\n    // yet. This can happen when cache.diff returns an empty object which is\n    // used from watchFragment.\n    return data;\n  }\n\n  return maskDefinition(data, fragment.selectionSet, {\n    operationType: \"fragment\",\n    operationName: fragment.name.value,\n    fragmentMap: createFragmentMap(getFragmentDefinitions(document)),\n    cache,\n    mutableTargets: new MapImpl(),\n    knownChanged: new SetImpl(),\n  });\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,SAAS;AAO9B,SACEC,OAAO,EACPC,OAAO,EACPC,iCAAiC,QAC5B,YAAY;AACnB,SAASC,SAAS,QAAQ,+BAA+B;AACzD,OAAOC,KAAK,MAAM,eAAe;AACjC,SAASC,cAAc,QAAQ,qBAAqB;AACpD,SACEC,iBAAiB,EACjBC,sBAAsB,QACjB,uBAAuB;AAE9B;AACA,OAAM,SAAUC,YAAYA,CAC1BC,IAAW,EACXC,QAAiD,EACjDC,KAA2B,EAC3BC,YAAqB;EAErB,IAAI,CAACD,KAAK,CAACE,eAAe,EAAE;IAC1B,IAAIC,UAAU,CAAAC,OAAA;MACZb,iCAAiC,EAAE;IACrC;IAEA,OAAOO,IAAI;EACb;EAEA,IAAMO,SAAS,GAAGN,QAAQ,CAACO,WAAW,CAACC,MAAM,CAC3C,UAACC,IAAI;IACH,OAAAA,IAAI,CAACC,IAAI,KAAKrB,IAAI,CAACsB,mBAAmB;EAAtC,CAAsC,CACzC;EAED,IAAI,OAAOT,YAAY,KAAK,WAAW,EAAE;IACvCT,SAAS,CACPa,SAAS,CAACM,MAAM,KAAK,CAAC,EACtB,IAAAN,SAAA,CAAAM,MAAA;IAGFV,YAAY,GAAGI,SAAS,CAAC,CAAC,CAAC,CAACO,IAAI,CAACC,KAAK;EACxC;EAEA,IAAMC,QAAQ,GAAGT,SAAS,CAACU,IAAI,CAC7B,UAACD,QAAQ;IAAK,OAAAA,QAAQ,CAACF,IAAI,CAACC,KAAK,KAAKZ,YAAY;EAApC,CAAoC,CACnD;EAEDT,SAAS,CACP,CAAC,CAACsB,QAAQ,EACV,IAAAb,YAAA;EAIF,IAAIH,IAAI,IAAI,IAAI,EAAE;IAChB;IACA,OAAOA,IAAI;EACb;EAEA,IAAIL,KAAK,CAACK,IAAI,EAAE,EAAE,CAAC,EAAE;IACnB;IACA;IACA;IACA,OAAOA,IAAI;EACb;EAEA,OAAOJ,cAAc,CAACI,IAAI,EAAEgB,QAAQ,CAACE,YAAY,EAAE;IACjDC,aAAa,EAAE,UAAU;IACzBC,aAAa,EAAEJ,QAAQ,CAACF,IAAI,CAACC,KAAK;IAClCM,WAAW,EAAExB,iBAAiB,CAACC,sBAAsB,CAACG,QAAQ,CAAC,CAAC;IAChEC,KAAK,EAAAA,KAAA;IACLoB,cAAc,EAAE,IAAI/B,OAAO,EAAE;IAC7BgC,YAAY,EAAE,IAAI/B,OAAO;GAC1B,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}