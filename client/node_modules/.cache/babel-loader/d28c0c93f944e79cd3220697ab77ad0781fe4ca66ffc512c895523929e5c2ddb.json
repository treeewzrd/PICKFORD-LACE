{"ast":null,"code":"import { invariant } from \"../utilities/globals/index.js\";\nimport { createFragmentMap, getFragmentDefinitions, getOperationDefinition } from \"../utilities/index.js\";\nimport { maskDefinition } from \"./maskDefinition.js\";\nimport { MapImpl, SetImpl, warnOnImproperCacheImplementation } from \"./utils.js\";\n/** @internal */\nexport function maskOperation(data, document, cache) {\n  var _a;\n  if (!cache.fragmentMatches) {\n    if (globalThis.__DEV__ !== false) {\n      warnOnImproperCacheImplementation();\n    }\n    return data;\n  }\n  var definition = getOperationDefinition(document);\n  invariant(definition, 51);\n  if (data == null) {\n    // Maintain the original `null` or `undefined` value\n    return data;\n  }\n  return maskDefinition(data, definition.selectionSet, {\n    operationType: definition.operation,\n    operationName: (_a = definition.name) === null || _a === void 0 ? void 0 : _a.value,\n    fragmentMap: createFragmentMap(getFragmentDefinitions(document)),\n    cache: cache,\n    mutableTargets: new MapImpl(),\n    knownChanged: new SetImpl()\n  });\n}","map":{"version":3,"names":["invariant","createFragmentMap","getFragmentDefinitions","getOperationDefinition","maskDefinition","MapImpl","SetImpl","warnOnImproperCacheImplementation","maskOperation","data","document","cache","fragmentMatches","globalThis","__DEV__","definition","selectionSet","operationType","operation","operationName","_a","name","value","fragmentMap","mutableTargets","knownChanged"],"sources":["C:\\bootcamp\\PICKFORD---LACE\\client\\node_modules\\@apollo\\src\\masking\\maskOperation.ts"],"sourcesContent":["import type {\n  ApolloCache,\n  DocumentNode,\n  TypedDocumentNode,\n} from \"../core/index.js\";\nimport { invariant } from \"../utilities/globals/index.js\";\nimport {\n  createFragmentMap,\n  getFragmentDefinitions,\n  getOperationDefinition,\n} from \"../utilities/index.js\";\nimport { maskDefinition } from \"./maskDefinition.js\";\nimport {\n  MapImpl,\n  SetImpl,\n  warnOnImproperCacheImplementation,\n} from \"./utils.js\";\n\n/** @internal */\nexport function maskOperation<TData = unknown>(\n  data: TData,\n  document: DocumentNode | TypedDocumentNode<TData>,\n  cache: ApolloCache<unknown>\n): TData {\n  if (!cache.fragmentMatches) {\n    if (__DEV__) {\n      warnOnImproperCacheImplementation();\n    }\n\n    return data;\n  }\n\n  const definition = getOperationDefinition(document);\n\n  invariant(\n    definition,\n    \"Expected a parsed GraphQL document with a query, mutation, or subscription.\"\n  );\n\n  if (data == null) {\n    // Maintain the original `null` or `undefined` value\n    return data;\n  }\n\n  return maskDefinition(data, definition.selectionSet, {\n    operationType: definition.operation,\n    operationName: definition.name?.value,\n    fragmentMap: createFragmentMap(getFragmentDefinitions(document)),\n    cache,\n    mutableTargets: new MapImpl(),\n    knownChanged: new SetImpl(),\n  });\n}\n"],"mappings":"AAKA,SAASA,SAAS,QAAQ,+BAA+B;AACzD,SACEC,iBAAiB,EACjBC,sBAAsB,EACtBC,sBAAsB,QACjB,uBAAuB;AAC9B,SAASC,cAAc,QAAQ,qBAAqB;AACpD,SACEC,OAAO,EACPC,OAAO,EACPC,iCAAiC,QAC5B,YAAY;AAEnB;AACA,OAAM,SAAUC,aAAaA,CAC3BC,IAAW,EACXC,QAAiD,EACjDC,KAA2B;;EAE3B,IAAI,CAACA,KAAK,CAACC,eAAe,EAAE;IAC1B,IAAIC,UAAU,CAAAC,OAAA;MACZP,iCAAiC,EAAE;IACrC;IAEA,OAAOE,IAAI;EACb;EAEA,IAAMM,UAAU,GAAGZ,sBAAsB,CAACO,QAAQ,CAAC;EAEnDV,SAAS,CACPe,UAAU,EACV;EAGF,IAAIN,IAAI,IAAI,IAAI,EAAE;IAChB;IACA,OAAOA,IAAI;EACb;EAEA,OAAOL,cAAc,CAACK,IAAI,EAAEM,UAAU,CAACC,YAAY,EAAE;IACnDC,aAAa,EAAEF,UAAU,CAACG,SAAS;IACnCC,aAAa,EAAE,CAAAC,EAAA,GAAAL,UAAU,CAACM,IAAI,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,KAAK;IACrCC,WAAW,EAAEtB,iBAAiB,CAACC,sBAAsB,CAACQ,QAAQ,CAAC,CAAC;IAChEC,KAAK,EAAAA,KAAA;IACLa,cAAc,EAAE,IAAInB,OAAO,EAAE;IAC7BoB,YAAY,EAAE,IAAInB,OAAO;GAC1B,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}