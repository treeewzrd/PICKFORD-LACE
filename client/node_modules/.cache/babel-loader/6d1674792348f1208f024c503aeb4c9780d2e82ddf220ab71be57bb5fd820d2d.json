{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport { invariant, newInvariantError } from \"../globals/index.js\";\nimport { BREAK, visit } from \"graphql\";\n/**\r\n * Returns a query document which adds a single query operation that only\r\n * spreads the target fragment inside of it.\r\n *\r\n * So for example a document of:\r\n *\r\n * ```graphql\r\n * fragment foo on Foo { a b c }\r\n * ```\r\n *\r\n * Turns into:\r\n *\r\n * ```graphql\r\n * { ...foo }\r\n *\r\n * fragment foo on Foo { a b c }\r\n * ```\r\n *\r\n * The target fragment will either be the only fragment in the document, or a\r\n * fragment specified by the provided `fragmentName`. If there is more than one\r\n * fragment, but a `fragmentName` was not defined then an error will be thrown.\r\n */\nexport function getFragmentQueryDocument(document, fragmentName) {\n  var actualFragmentName = fragmentName;\n  // Build an array of all our fragment definitions that will be used for\n  // validations. We also do some validations on the other definitions in the\n  // document while building this list.\n  var fragments = [];\n  document.definitions.forEach(function (definition) {\n    // Throw an error if we encounter an operation definition because we will\n    // define our own operation definition later on.\n    if (definition.kind === \"OperationDefinition\") {\n      throw newInvariantError(85, definition.operation, definition.name ? \" named '\".concat(definition.name.value, \"'\") : \"\");\n    }\n    // Add our definition to the fragments array if it is a fragment\n    // definition.\n    if (definition.kind === \"FragmentDefinition\") {\n      fragments.push(definition);\n    }\n  });\n  // If the user did not give us a fragment name then let us try to get a\n  // name from a single fragment in the definition.\n  if (typeof actualFragmentName === \"undefined\") {\n    invariant(fragments.length === 1, 86, fragments.length);\n    actualFragmentName = fragments[0].name.value;\n  }\n  // Generate a query document with an operation that simply spreads the\n  // fragment inside of it.\n  var query = __assign(__assign({}, document), {\n    definitions: __spreadArray([{\n      kind: \"OperationDefinition\",\n      // OperationTypeNode is an enum\n      operation: \"query\",\n      selectionSet: {\n        kind: \"SelectionSet\",\n        selections: [{\n          kind: \"FragmentSpread\",\n          name: {\n            kind: \"Name\",\n            value: actualFragmentName\n          }\n        }]\n      }\n    }], document.definitions, true)\n  });\n  return query;\n}\n// Utility function that takes a list of fragment definitions and makes a hash out of them\n// that maps the name of the fragment to the fragment definition.\nexport function createFragmentMap(fragments) {\n  if (fragments === void 0) {\n    fragments = [];\n  }\n  var symTable = {};\n  fragments.forEach(function (fragment) {\n    symTable[fragment.name.value] = fragment;\n  });\n  return symTable;\n}\nexport function getFragmentFromSelection(selection, fragmentMap) {\n  switch (selection.kind) {\n    case \"InlineFragment\":\n      return selection;\n    case \"FragmentSpread\":\n      {\n        var fragmentName = selection.name.value;\n        if (typeof fragmentMap === \"function\") {\n          return fragmentMap(fragmentName);\n        }\n        var fragment = fragmentMap && fragmentMap[fragmentName];\n        invariant(fragment, 87, fragmentName);\n        return fragment || null;\n      }\n    default:\n      return null;\n  }\n}\nexport function isFullyUnmaskedOperation(document) {\n  var isUnmasked = true;\n  visit(document, {\n    FragmentSpread: function (node) {\n      isUnmasked = !!node.directives && node.directives.some(function (directive) {\n        return directive.name.value === \"unmask\";\n      });\n      if (!isUnmasked) {\n        return BREAK;\n      }\n    }\n  });\n  return isUnmasked;\n}","map":{"version":3,"names":["invariant","newInvariantError","BREAK","visit","getFragmentQueryDocument","document","fragmentName","actualFragmentName","fragments","definitions","forEach","definition","kind","operation","name","concat","value","push","length","__assign","__spreadArray","query","createFragmentMap","symTable","fragment","getFragmentFromSelection","selection","fragmentMap","isFullyUnmaskedOperation","FragmentSpread","node","isUnmasked","directives","some","directive"],"sources":["C:\\bootcamp\\PICKFORD---LACE\\client\\node_modules\\@apollo\\src\\utilities\\graphql\\fragments.ts"],"sourcesContent":["import { invariant, newInvariantError } from \"../globals/index.js\";\n\nimport { BREAK, visit } from \"graphql\";\nimport type {\n  DocumentNode,\n  FragmentDefinitionNode,\n  InlineFragmentNode,\n  SelectionNode,\n} from \"graphql\";\n\n// TODO(brian): A hack until this issue is resolved (https://github.com/graphql/graphql-js/issues/3356)\ntype Kind = any;\ntype OperationTypeNode = any;\n/**\n * Returns a query document which adds a single query operation that only\n * spreads the target fragment inside of it.\n *\n * So for example a document of:\n *\n * ```graphql\n * fragment foo on Foo { a b c }\n * ```\n *\n * Turns into:\n *\n * ```graphql\n * { ...foo }\n *\n * fragment foo on Foo { a b c }\n * ```\n *\n * The target fragment will either be the only fragment in the document, or a\n * fragment specified by the provided `fragmentName`. If there is more than one\n * fragment, but a `fragmentName` was not defined then an error will be thrown.\n */\nexport function getFragmentQueryDocument(\n  document: DocumentNode,\n  fragmentName?: string\n): DocumentNode {\n  let actualFragmentName = fragmentName;\n\n  // Build an array of all our fragment definitions that will be used for\n  // validations. We also do some validations on the other definitions in the\n  // document while building this list.\n  const fragments: Array<FragmentDefinitionNode> = [];\n  document.definitions.forEach((definition) => {\n    // Throw an error if we encounter an operation definition because we will\n    // define our own operation definition later on.\n    if (definition.kind === \"OperationDefinition\") {\n      throw newInvariantError(\n        `Found a %s operation%s. ` +\n          \"No operations are allowed when using a fragment as a query. Only fragments are allowed.\",\n        definition.operation,\n        definition.name ? ` named '${definition.name.value}'` : \"\"\n      );\n    }\n    // Add our definition to the fragments array if it is a fragment\n    // definition.\n    if (definition.kind === \"FragmentDefinition\") {\n      fragments.push(definition);\n    }\n  });\n\n  // If the user did not give us a fragment name then let us try to get a\n  // name from a single fragment in the definition.\n  if (typeof actualFragmentName === \"undefined\") {\n    invariant(\n      fragments.length === 1,\n      `Found %s fragments. \\`fragmentName\\` must be provided when there is not exactly 1 fragment.`,\n      fragments.length\n    );\n    actualFragmentName = fragments[0].name.value;\n  }\n\n  // Generate a query document with an operation that simply spreads the\n  // fragment inside of it.\n  const query: DocumentNode = {\n    ...document,\n    definitions: [\n      {\n        kind: \"OperationDefinition\" as Kind,\n        // OperationTypeNode is an enum\n        operation: \"query\" as OperationTypeNode,\n        selectionSet: {\n          kind: \"SelectionSet\" as Kind,\n          selections: [\n            {\n              kind: \"FragmentSpread\" as Kind,\n              name: {\n                kind: \"Name\" as Kind,\n                value: actualFragmentName,\n              },\n            },\n          ],\n        },\n      },\n      ...document.definitions,\n    ],\n  };\n\n  return query;\n}\n\n/**\n * This is an interface that describes a map from fragment names to fragment definitions.\n */\nexport interface FragmentMap {\n  [fragmentName: string]: FragmentDefinitionNode;\n}\n\nexport type FragmentMapFunction = (\n  fragmentName: string\n) => FragmentDefinitionNode | null;\n\n// Utility function that takes a list of fragment definitions and makes a hash out of them\n// that maps the name of the fragment to the fragment definition.\nexport function createFragmentMap(\n  fragments: FragmentDefinitionNode[] = []\n): FragmentMap {\n  const symTable: FragmentMap = {};\n  fragments.forEach((fragment) => {\n    symTable[fragment.name.value] = fragment;\n  });\n  return symTable;\n}\n\nexport function getFragmentFromSelection(\n  selection: SelectionNode,\n  fragmentMap?: FragmentMap | FragmentMapFunction\n): InlineFragmentNode | FragmentDefinitionNode | null {\n  switch (selection.kind) {\n    case \"InlineFragment\":\n      return selection;\n    case \"FragmentSpread\": {\n      const fragmentName = selection.name.value;\n      if (typeof fragmentMap === \"function\") {\n        return fragmentMap(fragmentName);\n      }\n      const fragment = fragmentMap && fragmentMap[fragmentName];\n      invariant(fragment, `No fragment named %s`, fragmentName);\n      return fragment || null;\n    }\n    default:\n      return null;\n  }\n}\n\nexport function isFullyUnmaskedOperation(document: DocumentNode) {\n  let isUnmasked = true;\n\n  visit(document, {\n    FragmentSpread: (node) => {\n      isUnmasked =\n        !!node.directives &&\n        node.directives.some((directive) => directive.name.value === \"unmask\");\n\n      if (!isUnmasked) {\n        return BREAK;\n      }\n    },\n  });\n\n  return isUnmasked;\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,iBAAiB,QAAQ,qBAAqB;AAElE,SAASC,KAAK,EAAEC,KAAK,QAAQ,SAAS;AAWtC;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAM,SAAUC,wBAAwBA,CACtCC,QAAsB,EACtBC,YAAqB;EAErB,IAAIC,kBAAkB,GAAGD,YAAY;EAErC;EACA;EACA;EACA,IAAME,SAAS,GAAkC,EAAE;EACnDH,QAAQ,CAACI,WAAW,CAACC,OAAO,CAAC,UAACC,UAAU;IACtC;IACA;IACA,IAAIA,UAAU,CAACC,IAAI,KAAK,qBAAqB,EAAE;MAC7C,MAAMX,iBAAiB,CAEnB,IAILU,UAAA,CAAAE,SAAA,EACDF,UAAA,CAAAG,IAAA,cAAAC,MAAA,CAAAJ,UAAA,CAAAG,IAAA,CAAAE,KAAgE,WAChE;IACA;;IAEA;IACC,IAAAL,UAAA,CAAAC,IAAA;MAEHJ,SAAA,CAAAS,IAAA,CAAAN,UAAA;IACA;EACA;;;EAOA,IAAC,OAAAJ,kBAAA;IAEDP,SAAA,CAAAQ,SAAA,CAAAU,MAAA,YAAAV,SAAA,CAAAU,MAAA;IACAX,kBAAA,GAAyBC,SAAA,IAAAM,IAAA,CAAAE,KAAA;EACzB;;;cAKMG,QAAA,CAAAA,QAAA,KAAAd,QAAA,CAA+B;IAAAI,WAAA,EAAAW,aAAA,E;MAE/BR,IAAA,uBAAc;;eAEZ,SAAY;kBACV;4BACQ;kBACN,EAAI,C;cAEF,kBAAO;cACR;YACFA,IAAA;YACFI,KAAA,EAAAT;UACF;QACF;MAKO;IACb,EAaD,EAAAF,QAAA,CAAAI,WAAA;EAAA;EACA,OAAAY,KAAA;AACA;;;OAIE,SAAUC,iBAASA,CAAAd,SAAQ;MACzBA,SAAS,UAAS,GAAI;IAACA,SAAS;EAAQ;EAC1C,IAAGe,QAAA;EACHf,SAAO,CAAAE,OAAS,WAAAc,QAAA;IACjBD,QAAA,CAAAC,QAAA,CAAAV,IAAA,CAAAE,KAAA,IAAAQ,QAAA;EAED,EAAM;EAIJ,OAAAD,QAAQ;;gBAEJE,wBAAiBA,CAAAC,SAAA,EAAAC,WAAA;UACnBD,SAAK,CAAAd,IAAA;SACH,gBAAkB;MAClB,OAAIc,SAAO;yBACF;MAAA;QACT,IAACpB,YAAA,GAAAoB,SAAA,CAAAZ,IAAA,CAAAE,KAAA;QACD,IAAM,OAAAW,WAAW,KAAW,UAAI;UAChC,OAAUA,WAAU,CAAArB,YAAA;QACpB;QACD,IAAAkB,QAAA,GAAAG,WAAA,IAAAA,WAAA,CAAArB,YAAA;QACDN,SAAA,CAAAwB,QAAA,MAAAlB,YAAA;QACE,OAAOkB,QAAK;MACf;IACF;MAEK,OAAU;EACd;;gBAGEI,wBAAqBA,CAAAvB,QAAA;gBACnB,OAAU;gBACN;kBACF,EAAI,SAAAwB,CAACC,IAAW,EAAI;MAEtBC,UAAK,GACH,EAAAD,IAAA,CAAOE,UAAM,IACdF,IAAA,CAAAE,UAAA,CAAAC,IAAA,WAAAC,SAAA;QAAA,OAAAA,SAAA,CAAApB,IAAA,CAAAE,KAAA;MAAA;MACF,KAAAe,UAAA;QACA,OAAA7B,KAAA;MAEI;IACR","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}