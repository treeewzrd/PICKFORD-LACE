{"ast":null,"code":"import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { DirectiveLocation } from '../language/directiveLocation.mjs';\nimport { assertName } from './assertName.mjs';\nimport { argsToArgsConfig, defineArguments, GraphQLNonNull } from './definition.mjs';\nimport { GraphQLBoolean, GraphQLString } from './scalars.mjs';\n/**\r\n * Test if the given value is a GraphQL directive.\r\n */\n\nexport function isDirective(directive) {\n  return instanceOf(directive, GraphQLDirective);\n}\nexport function assertDirective(directive) {\n  if (!isDirective(directive)) {\n    throw new Error(`Expected ${inspect(directive)} to be a GraphQL directive.`);\n  }\n  return directive;\n}\n/**\r\n * Custom extensions\r\n *\r\n * @remarks\r\n * Use a unique identifier name for your extension, for example the name of\r\n * your library or project. Do not use a shortened identifier as this increases\r\n * the risk of conflicts. We recommend you add at most one extension field,\r\n * an object which can contain all the values you need.\r\n */\n\n/**\r\n * Directives are used by the GraphQL runtime as a way of modifying execution\r\n * behavior. Type system creators will usually not create these directly.\r\n */\nexport class GraphQLDirective {\n  constructor(config) {\n    var _config$isRepeatable, _config$args;\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.locations = config.locations;\n    this.isRepeatable = (_config$isRepeatable = config.isRepeatable) !== null && _config$isRepeatable !== void 0 ? _config$isRepeatable : false;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    Array.isArray(config.locations) || devAssert(false, `@${config.name} locations must be an Array.`);\n    const args = (_config$args = config.args) !== null && _config$args !== void 0 ? _config$args : {};\n    isObjectLike(args) && !Array.isArray(args) || devAssert(false, `@${config.name} args must be an object with argument names as keys.`);\n    this.args = defineArguments(args);\n  }\n  get [Symbol.toStringTag]() {\n    return 'GraphQLDirective';\n  }\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      locations: this.locations,\n      args: argsToArgsConfig(this.args),\n      isRepeatable: this.isRepeatable,\n      extensions: this.extensions,\n      astNode: this.astNode\n    };\n  }\n  toString() {\n    return '@' + this.name;\n  }\n  toJSON() {\n    return this.toString();\n  }\n}\n\n/**\r\n * Used to conditionally include fields or fragments.\r\n */\nexport const GraphQLIncludeDirective = new GraphQLDirective({\n  name: 'include',\n  description: 'Directs the executor to include this field or fragment only when the `if` argument is true.',\n  locations: [DirectiveLocation.FIELD, DirectiveLocation.FRAGMENT_SPREAD, DirectiveLocation.INLINE_FRAGMENT],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Included when true.'\n    }\n  }\n});\n/**\r\n * Used to conditionally skip (exclude) fields or fragments.\r\n */\n\nexport const GraphQLSkipDirective = new GraphQLDirective({\n  name: 'skip',\n  description: 'Directs the executor to skip this field or fragment when the `if` argument is true.',\n  locations: [DirectiveLocation.FIELD, DirectiveLocation.FRAGMENT_SPREAD, DirectiveLocation.INLINE_FRAGMENT],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Skipped when true.'\n    }\n  }\n});\n/**\r\n * Constant string used for default reason for a deprecation.\r\n */\n\nexport const DEFAULT_DEPRECATION_REASON = 'No longer supported';\n/**\r\n * Used to declare element of a GraphQL schema as deprecated.\r\n */\n\nexport const GraphQLDeprecatedDirective = new GraphQLDirective({\n  name: 'deprecated',\n  description: 'Marks an element of a GraphQL schema as no longer supported.',\n  locations: [DirectiveLocation.FIELD_DEFINITION, DirectiveLocation.ARGUMENT_DEFINITION, DirectiveLocation.INPUT_FIELD_DEFINITION, DirectiveLocation.ENUM_VALUE],\n  args: {\n    reason: {\n      type: GraphQLString,\n      description: 'Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).',\n      defaultValue: DEFAULT_DEPRECATION_REASON\n    }\n  }\n});\n/**\r\n * Used to provide a URL for specifying the behavior of custom scalar definitions.\r\n */\n\nexport const GraphQLSpecifiedByDirective = new GraphQLDirective({\n  name: 'specifiedBy',\n  description: 'Exposes a URL that specifies the behavior of this scalar.',\n  locations: [DirectiveLocation.SCALAR],\n  args: {\n    url: {\n      type: new GraphQLNonNull(GraphQLString),\n      description: 'The URL that specifies the behavior of this scalar.'\n    }\n  }\n});\n/**\r\n * Used to indicate an Input Object is a OneOf Input Object.\r\n */\n\nexport const GraphQLOneOfDirective = new GraphQLDirective({\n  name: 'oneOf',\n  description: 'Indicates exactly one field must be supplied and this field must not be `null`.',\n  locations: [DirectiveLocation.INPUT_OBJECT],\n  args: {}\n});\n/**\r\n * The full list of specified directives.\r\n */\n\nexport const specifiedDirectives = Object.freeze([GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective, GraphQLSpecifiedByDirective, GraphQLOneOfDirective]);\nexport function isSpecifiedDirective(directive) {\n  return specifiedDirectives.some(({\n    name\n  }) => name === directive.name);\n}","map":{"version":3,"names":["devAssert","inspect","instanceOf","isObjectLike","toObjMap","DirectiveLocation","assertName","argsToArgsConfig","defineArguments","GraphQLNonNull","GraphQLBoolean","GraphQLString","isDirective","directive","GraphQLDirective","assertDirective","Error","constructor","config","_config$isRepeatable","_config$args","name","description","locations","isRepeatable","extensions","astNode","Array","isArray","args","Symbol","toStringTag","toConfig","toString","toJSON","GraphQLIncludeDirective","FIELD","FRAGMENT_SPREAD","INLINE_FRAGMENT","if","type","GraphQLSkipDirective","DEFAULT_DEPRECATION_REASON","GraphQLDeprecatedDirective","FIELD_DEFINITION","ARGUMENT_DEFINITION","INPUT_FIELD_DEFINITION","ENUM_VALUE","reason","defaultValue","GraphQLSpecifiedByDirective","SCALAR","url","GraphQLOneOfDirective","INPUT_OBJECT","specifiedDirectives","Object","freeze","isSpecifiedDirective","some"],"sources":["C:/bootcamp/PICKFORD---LACE/client/node_modules/graphql/type/directives.mjs"],"sourcesContent":["import { devAssert } from '../jsutils/devAssert.mjs';\r\nimport { inspect } from '../jsutils/inspect.mjs';\r\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\r\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\r\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\r\nimport { DirectiveLocation } from '../language/directiveLocation.mjs';\r\nimport { assertName } from './assertName.mjs';\r\nimport {\r\n  argsToArgsConfig,\r\n  defineArguments,\r\n  GraphQLNonNull,\r\n} from './definition.mjs';\r\nimport { GraphQLBoolean, GraphQLString } from './scalars.mjs';\r\n/**\r\n * Test if the given value is a GraphQL directive.\r\n */\r\n\r\nexport function isDirective(directive) {\r\n  return instanceOf(directive, GraphQLDirective);\r\n}\r\nexport function assertDirective(directive) {\r\n  if (!isDirective(directive)) {\r\n    throw new Error(\r\n      `Expected ${inspect(directive)} to be a GraphQL directive.`,\r\n    );\r\n  }\r\n\r\n  return directive;\r\n}\r\n/**\r\n * Custom extensions\r\n *\r\n * @remarks\r\n * Use a unique identifier name for your extension, for example the name of\r\n * your library or project. Do not use a shortened identifier as this increases\r\n * the risk of conflicts. We recommend you add at most one extension field,\r\n * an object which can contain all the values you need.\r\n */\r\n\r\n/**\r\n * Directives are used by the GraphQL runtime as a way of modifying execution\r\n * behavior. Type system creators will usually not create these directly.\r\n */\r\nexport class GraphQLDirective {\r\n  constructor(config) {\r\n    var _config$isRepeatable, _config$args;\r\n\r\n    this.name = assertName(config.name);\r\n    this.description = config.description;\r\n    this.locations = config.locations;\r\n    this.isRepeatable =\r\n      (_config$isRepeatable = config.isRepeatable) !== null &&\r\n      _config$isRepeatable !== void 0\r\n        ? _config$isRepeatable\r\n        : false;\r\n    this.extensions = toObjMap(config.extensions);\r\n    this.astNode = config.astNode;\r\n    Array.isArray(config.locations) ||\r\n      devAssert(false, `@${config.name} locations must be an Array.`);\r\n    const args =\r\n      (_config$args = config.args) !== null && _config$args !== void 0\r\n        ? _config$args\r\n        : {};\r\n    (isObjectLike(args) && !Array.isArray(args)) ||\r\n      devAssert(\r\n        false,\r\n        `@${config.name} args must be an object with argument names as keys.`,\r\n      );\r\n    this.args = defineArguments(args);\r\n  }\r\n\r\n  get [Symbol.toStringTag]() {\r\n    return 'GraphQLDirective';\r\n  }\r\n\r\n  toConfig() {\r\n    return {\r\n      name: this.name,\r\n      description: this.description,\r\n      locations: this.locations,\r\n      args: argsToArgsConfig(this.args),\r\n      isRepeatable: this.isRepeatable,\r\n      extensions: this.extensions,\r\n      astNode: this.astNode,\r\n    };\r\n  }\r\n\r\n  toString() {\r\n    return '@' + this.name;\r\n  }\r\n\r\n  toJSON() {\r\n    return this.toString();\r\n  }\r\n}\r\n\r\n/**\r\n * Used to conditionally include fields or fragments.\r\n */\r\nexport const GraphQLIncludeDirective = new GraphQLDirective({\r\n  name: 'include',\r\n  description:\r\n    'Directs the executor to include this field or fragment only when the `if` argument is true.',\r\n  locations: [\r\n    DirectiveLocation.FIELD,\r\n    DirectiveLocation.FRAGMENT_SPREAD,\r\n    DirectiveLocation.INLINE_FRAGMENT,\r\n  ],\r\n  args: {\r\n    if: {\r\n      type: new GraphQLNonNull(GraphQLBoolean),\r\n      description: 'Included when true.',\r\n    },\r\n  },\r\n});\r\n/**\r\n * Used to conditionally skip (exclude) fields or fragments.\r\n */\r\n\r\nexport const GraphQLSkipDirective = new GraphQLDirective({\r\n  name: 'skip',\r\n  description:\r\n    'Directs the executor to skip this field or fragment when the `if` argument is true.',\r\n  locations: [\r\n    DirectiveLocation.FIELD,\r\n    DirectiveLocation.FRAGMENT_SPREAD,\r\n    DirectiveLocation.INLINE_FRAGMENT,\r\n  ],\r\n  args: {\r\n    if: {\r\n      type: new GraphQLNonNull(GraphQLBoolean),\r\n      description: 'Skipped when true.',\r\n    },\r\n  },\r\n});\r\n/**\r\n * Constant string used for default reason for a deprecation.\r\n */\r\n\r\nexport const DEFAULT_DEPRECATION_REASON = 'No longer supported';\r\n/**\r\n * Used to declare element of a GraphQL schema as deprecated.\r\n */\r\n\r\nexport const GraphQLDeprecatedDirective = new GraphQLDirective({\r\n  name: 'deprecated',\r\n  description: 'Marks an element of a GraphQL schema as no longer supported.',\r\n  locations: [\r\n    DirectiveLocation.FIELD_DEFINITION,\r\n    DirectiveLocation.ARGUMENT_DEFINITION,\r\n    DirectiveLocation.INPUT_FIELD_DEFINITION,\r\n    DirectiveLocation.ENUM_VALUE,\r\n  ],\r\n  args: {\r\n    reason: {\r\n      type: GraphQLString,\r\n      description:\r\n        'Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).',\r\n      defaultValue: DEFAULT_DEPRECATION_REASON,\r\n    },\r\n  },\r\n});\r\n/**\r\n * Used to provide a URL for specifying the behavior of custom scalar definitions.\r\n */\r\n\r\nexport const GraphQLSpecifiedByDirective = new GraphQLDirective({\r\n  name: 'specifiedBy',\r\n  description: 'Exposes a URL that specifies the behavior of this scalar.',\r\n  locations: [DirectiveLocation.SCALAR],\r\n  args: {\r\n    url: {\r\n      type: new GraphQLNonNull(GraphQLString),\r\n      description: 'The URL that specifies the behavior of this scalar.',\r\n    },\r\n  },\r\n});\r\n/**\r\n * Used to indicate an Input Object is a OneOf Input Object.\r\n */\r\n\r\nexport const GraphQLOneOfDirective = new GraphQLDirective({\r\n  name: 'oneOf',\r\n  description:\r\n    'Indicates exactly one field must be supplied and this field must not be `null`.',\r\n  locations: [DirectiveLocation.INPUT_OBJECT],\r\n  args: {},\r\n});\r\n/**\r\n * The full list of specified directives.\r\n */\r\n\r\nexport const specifiedDirectives = Object.freeze([\r\n  GraphQLIncludeDirective,\r\n  GraphQLSkipDirective,\r\n  GraphQLDeprecatedDirective,\r\n  GraphQLSpecifiedByDirective,\r\n  GraphQLOneOfDirective,\r\n]);\r\nexport function isSpecifiedDirective(directive) {\r\n  return specifiedDirectives.some(({ name }) => name === directive.name);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}