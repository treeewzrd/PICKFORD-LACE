{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\r\n * No undefined variables\r\n *\r\n * A GraphQL operation is only valid if all variables encountered, both directly\r\n * and via fragment spreads, are defined by that operation.\r\n *\r\n * See https://spec.graphql.org/draft/#sec-All-Variable-Uses-Defined\r\n */\nexport function NoUndefinedVariablesRule(context) {\n  let variableNameDefined = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        variableNameDefined = Object.create(null);\n      },\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n        for (const {\n          node\n        } of usages) {\n          const varName = node.name.value;\n          if (variableNameDefined[varName] !== true) {\n            context.reportError(new GraphQLError(operation.name ? `Variable \"$${varName}\" is not defined by operation \"${operation.name.value}\".` : `Variable \"$${varName}\" is not defined.`, {\n              nodes: [node, operation]\n            }));\n          }\n        }\n      }\n    },\n    VariableDefinition(node) {\n      variableNameDefined[node.variable.name.value] = true;\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","NoUndefinedVariablesRule","context","variableNameDefined","Object","create","OperationDefinition","enter","leave","operation","usages","getRecursiveVariableUsages","node","varName","name","value","reportError","nodes","VariableDefinition","variable"],"sources":["C:/bootcamp/PICKFORD---LACE/client/node_modules/graphql/validation/rules/NoUndefinedVariablesRule.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\r\n\r\n/**\r\n * No undefined variables\r\n *\r\n * A GraphQL operation is only valid if all variables encountered, both directly\r\n * and via fragment spreads, are defined by that operation.\r\n *\r\n * See https://spec.graphql.org/draft/#sec-All-Variable-Uses-Defined\r\n */\r\nexport function NoUndefinedVariablesRule(context) {\r\n  let variableNameDefined = Object.create(null);\r\n  return {\r\n    OperationDefinition: {\r\n      enter() {\r\n        variableNameDefined = Object.create(null);\r\n      },\r\n\r\n      leave(operation) {\r\n        const usages = context.getRecursiveVariableUsages(operation);\r\n\r\n        for (const { node } of usages) {\r\n          const varName = node.name.value;\r\n\r\n          if (variableNameDefined[varName] !== true) {\r\n            context.reportError(\r\n              new GraphQLError(\r\n                operation.name\r\n                  ? `Variable \"$${varName}\" is not defined by operation \"${operation.name.value}\".`\r\n                  : `Variable \"$${varName}\" is not defined.`,\r\n                {\r\n                  nodes: [node, operation],\r\n                },\r\n              ),\r\n            );\r\n          }\r\n        }\r\n      },\r\n    },\r\n\r\n    VariableDefinition(node) {\r\n      variableNameDefined[node.variable.name.value] = true;\r\n    },\r\n  };\r\n}\r\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,8BAA8B;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,wBAAwBA,CAACC,OAAO,EAAE;EAChD,IAAIC,mBAAmB,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAC7C,OAAO;IACLC,mBAAmB,EAAE;MACnBC,KAAKA,CAAA,EAAG;QACNJ,mBAAmB,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;MAC3C,CAAC;MAEDG,KAAKA,CAACC,SAAS,EAAE;QACf,MAAMC,MAAM,GAAGR,OAAO,CAACS,0BAA0B,CAACF,SAAS,CAAC;QAE5D,KAAK,MAAM;UAAEG;QAAK,CAAC,IAAIF,MAAM,EAAE;UAC7B,MAAMG,OAAO,GAAGD,IAAI,CAACE,IAAI,CAACC,KAAK;UAE/B,IAAIZ,mBAAmB,CAACU,OAAO,CAAC,KAAK,IAAI,EAAE;YACzCX,OAAO,CAACc,WAAW,CACjB,IAAIhB,YAAY,CACdS,SAAS,CAACK,IAAI,GACV,cAAcD,OAAO,kCAAkCJ,SAAS,CAACK,IAAI,CAACC,KAAK,IAAI,GAC/E,cAAcF,OAAO,mBAAmB,EAC5C;cACEI,KAAK,EAAE,CAACL,IAAI,EAAEH,SAAS;YACzB,CACF,CACF,CAAC;UACH;QACF;MACF;IACF,CAAC;IAEDS,kBAAkBA,CAACN,IAAI,EAAE;MACvBT,mBAAmB,CAACS,IAAI,CAACO,QAAQ,CAACL,IAAI,CAACC,KAAK,CAAC,GAAG,IAAI;IACtD;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}