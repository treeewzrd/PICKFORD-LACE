{"ast":null,"code":"import { invariant } from '../jsutils/invariant.mjs';\nimport { parse } from '../language/parser.mjs';\nimport { executeSync } from '../execution/execute.mjs';\nimport { getIntrospectionQuery } from './getIntrospectionQuery.mjs';\n/**\r\n * Build an IntrospectionQuery from a GraphQLSchema\r\n *\r\n * IntrospectionQuery is useful for utilities that care about type and field\r\n * relationships, but do not need to traverse through those relationships.\r\n *\r\n * This is the inverse of buildClientSchema. The primary use case is outside\r\n * of the server context, for instance when doing schema comparisons.\r\n */\n\nexport function introspectionFromSchema(schema, options) {\n  const optionsWithDefaults = {\n    specifiedByUrl: true,\n    directiveIsRepeatable: true,\n    schemaDescription: true,\n    inputValueDeprecation: true,\n    oneOf: true,\n    ...options\n  };\n  const document = parse(getIntrospectionQuery(optionsWithDefaults));\n  const result = executeSync({\n    schema,\n    document\n  });\n  !result.errors && result.data || invariant(false);\n  return result.data;\n}","map":{"version":3,"names":["invariant","parse","executeSync","getIntrospectionQuery","introspectionFromSchema","schema","options","optionsWithDefaults","specifiedByUrl","directiveIsRepeatable","schemaDescription","inputValueDeprecation","oneOf","document","result","errors","data"],"sources":["C:/bootcamp/PICKFORD---LACE/client/node_modules/graphql/utilities/introspectionFromSchema.mjs"],"sourcesContent":["import { invariant } from '../jsutils/invariant.mjs';\r\nimport { parse } from '../language/parser.mjs';\r\nimport { executeSync } from '../execution/execute.mjs';\r\nimport { getIntrospectionQuery } from './getIntrospectionQuery.mjs';\r\n/**\r\n * Build an IntrospectionQuery from a GraphQLSchema\r\n *\r\n * IntrospectionQuery is useful for utilities that care about type and field\r\n * relationships, but do not need to traverse through those relationships.\r\n *\r\n * This is the inverse of buildClientSchema. The primary use case is outside\r\n * of the server context, for instance when doing schema comparisons.\r\n */\r\n\r\nexport function introspectionFromSchema(schema, options) {\r\n  const optionsWithDefaults = {\r\n    specifiedByUrl: true,\r\n    directiveIsRepeatable: true,\r\n    schemaDescription: true,\r\n    inputValueDeprecation: true,\r\n    oneOf: true,\r\n    ...options,\r\n  };\r\n  const document = parse(getIntrospectionQuery(optionsWithDefaults));\r\n  const result = executeSync({\r\n    schema,\r\n    document,\r\n  });\r\n  (!result.errors && result.data) || invariant(false);\r\n  return result.data;\r\n}\r\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,0BAA0B;AACpD,SAASC,KAAK,QAAQ,wBAAwB;AAC9C,SAASC,WAAW,QAAQ,0BAA0B;AACtD,SAASC,qBAAqB,QAAQ,6BAA6B;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,uBAAuBA,CAACC,MAAM,EAAEC,OAAO,EAAE;EACvD,MAAMC,mBAAmB,GAAG;IAC1BC,cAAc,EAAE,IAAI;IACpBC,qBAAqB,EAAE,IAAI;IAC3BC,iBAAiB,EAAE,IAAI;IACvBC,qBAAqB,EAAE,IAAI;IAC3BC,KAAK,EAAE,IAAI;IACX,GAAGN;EACL,CAAC;EACD,MAAMO,QAAQ,GAAGZ,KAAK,CAACE,qBAAqB,CAACI,mBAAmB,CAAC,CAAC;EAClE,MAAMO,MAAM,GAAGZ,WAAW,CAAC;IACzBG,MAAM;IACNQ;EACF,CAAC,CAAC;EACD,CAACC,MAAM,CAACC,MAAM,IAAID,MAAM,CAACE,IAAI,IAAKhB,SAAS,CAAC,KAAK,CAAC;EACnD,OAAOc,MAAM,CAACE,IAAI;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}