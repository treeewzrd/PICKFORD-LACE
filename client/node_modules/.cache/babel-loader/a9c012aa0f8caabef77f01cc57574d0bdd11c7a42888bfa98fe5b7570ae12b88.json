{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { wrap } from \"optimism\";\nimport { Observable, cacheSizes, getFragmentDefinition, getFragmentQueryDocument, mergeDeepArray } from \"../../utilities/index.js\";\nimport { WeakCache } from \"@wry/caches\";\nimport { getApolloCacheMemoryInternals } from \"../../utilities/caching/getMemoryInternals.js\";\nimport { equalByQuery } from \"../../core/equalByQuery.js\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { maskFragment } from \"../../masking/index.js\";\nvar ApolloCache = /** @class */function () {\n  function ApolloCache() {\n    this.assumeImmutableResults = false;\n    // Make sure we compute the same (===) fragment query document every\n    // time we receive the same fragment in readFragment.\n    this.getFragmentDoc = wrap(getFragmentQueryDocument, {\n      max: cacheSizes[\"cache.fragmentQueryDocuments\"] || 1000 /* defaultCacheSizes[\"cache.fragmentQueryDocuments\"] */,\n      cache: WeakCache\n    });\n  }\n  // Function used to lookup a fragment when a fragment definition is not part\n  // of the GraphQL document. This is useful for caches, such as InMemoryCache,\n  // that register fragments ahead of time so they can be referenced by name.\n  ApolloCache.prototype.lookupFragment = function (fragmentName) {\n    return null;\n  };\n  // Transactional API\n  // The batch method is intended to replace/subsume both performTransaction\n  // and recordOptimisticTransaction, but performTransaction came first, so we\n  // provide a default batch implementation that's just another way of calling\n  // performTransaction. Subclasses of ApolloCache (such as InMemoryCache) can\n  // override the batch method to do more interesting things with its options.\n  ApolloCache.prototype.batch = function (options) {\n    var _this = this;\n    var optimisticId = typeof options.optimistic === \"string\" ? options.optimistic : options.optimistic === false ? null : void 0;\n    var updateResult;\n    this.performTransaction(function () {\n      return updateResult = options.update(_this);\n    }, optimisticId);\n    return updateResult;\n  };\n  ApolloCache.prototype.recordOptimisticTransaction = function (transaction, optimisticId) {\n    this.performTransaction(transaction, optimisticId);\n  };\n  // Optional API\n  // Called once per input document, allowing the cache to make static changes\n  // to the query, such as adding __typename fields.\n  ApolloCache.prototype.transformDocument = function (document) {\n    return document;\n  };\n  // Called before each ApolloLink request, allowing the cache to make dynamic\n  // changes to the query, such as filling in missing fragment definitions.\n  ApolloCache.prototype.transformForLink = function (document) {\n    return document;\n  };\n  ApolloCache.prototype.identify = function (object) {\n    return;\n  };\n  ApolloCache.prototype.gc = function () {\n    return [];\n  };\n  ApolloCache.prototype.modify = function (options) {\n    return false;\n  };\n  // DataProxy API\n  ApolloCache.prototype.readQuery = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = !!options.optimistic;\n    }\n    return this.read(__assign(__assign({}, options), {\n      rootId: options.id || \"ROOT_QUERY\",\n      optimistic: optimistic\n    }));\n  };\n  /** {@inheritDoc @apollo/client!ApolloClient#watchFragment:member(1)} */\n  ApolloCache.prototype.watchFragment = function (options) {\n    var _this = this;\n    var fragment = options.fragment,\n      fragmentName = options.fragmentName,\n      from = options.from,\n      _a = options.optimistic,\n      optimistic = _a === void 0 ? true : _a,\n      otherOptions = __rest(options, [\"fragment\", \"fragmentName\", \"from\", \"optimistic\"]);\n    var query = this.getFragmentDoc(fragment, fragmentName);\n    // While our TypeScript types do not allow for `undefined` as a valid\n    // `from`, its possible `useFragment` gives us an `undefined` since it\n    // calls` cache.identify` and provides that value to `from`. We are\n    // adding this fix here however to ensure those using plain JavaScript\n    // and using `cache.identify` themselves will avoid seeing the obscure\n    // warning.\n    var id = typeof from === \"undefined\" || typeof from === \"string\" ? from : this.identify(from);\n    var dataMasking = !!options[Symbol.for(\"apollo.dataMasking\")];\n    if (globalThis.__DEV__ !== false) {\n      var actualFragmentName = fragmentName || getFragmentDefinition(fragment).name.value;\n      if (!id) {\n        globalThis.__DEV__ !== false && invariant.warn(1, actualFragmentName);\n      }\n    }\n    var diffOptions = __assign(__assign({}, otherOptions), {\n      returnPartialData: true,\n      id: id,\n      query: query,\n      optimistic: optimistic\n    });\n    var latestDiff;\n    return new Observable(function (observer) {\n      return _this.watch(__assign(__assign({}, diffOptions), {\n        immediate: true,\n        callback: function (diff) {\n          var data = dataMasking ? maskFragment(diff.result, fragment, _this, fragmentName) : diff.result;\n          if (\n          // Always ensure we deliver the first result\n          latestDiff && equalByQuery(query, {\n            data: latestDiff.result\n          }, {\n            data: data\n          },\n          // TODO: Fix the type on WatchFragmentOptions so that TVars\n          // extends OperationVariables\n          options.variables)) {\n            return;\n          }\n          var result = {\n            data: data,\n            complete: !!diff.complete\n          };\n          if (diff.missing) {\n            result.missing = mergeDeepArray(diff.missing.map(function (error) {\n              return error.missing;\n            }));\n          }\n          latestDiff = __assign(__assign({}, diff), {\n            result: data\n          });\n          observer.next(result);\n        }\n      }));\n    });\n  };\n  ApolloCache.prototype.readFragment = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = !!options.optimistic;\n    }\n    return this.read(__assign(__assign({}, options), {\n      query: this.getFragmentDoc(options.fragment, options.fragmentName),\n      rootId: options.id,\n      optimistic: optimistic\n    }));\n  };\n  ApolloCache.prototype.writeQuery = function (_a) {\n    var id = _a.id,\n      data = _a.data,\n      options = __rest(_a, [\"id\", \"data\"]);\n    return this.write(Object.assign(options, {\n      dataId: id || \"ROOT_QUERY\",\n      result: data\n    }));\n  };\n  ApolloCache.prototype.writeFragment = function (_a) {\n    var id = _a.id,\n      data = _a.data,\n      fragment = _a.fragment,\n      fragmentName = _a.fragmentName,\n      options = __rest(_a, [\"id\", \"data\", \"fragment\", \"fragmentName\"]);\n    return this.write(Object.assign(options, {\n      query: this.getFragmentDoc(fragment, fragmentName),\n      dataId: id,\n      result: data\n    }));\n  };\n  ApolloCache.prototype.updateQuery = function (options, update) {\n    return this.batch({\n      update: function (cache) {\n        var value = cache.readQuery(options);\n        var data = update(value);\n        if (data === void 0 || data === null) return value;\n        cache.writeQuery(__assign(__assign({}, options), {\n          data: data\n        }));\n        return data;\n      }\n    });\n  };\n  ApolloCache.prototype.updateFragment = function (options, update) {\n    return this.batch({\n      update: function (cache) {\n        var value = cache.readFragment(options);\n        var data = update(value);\n        if (data === void 0 || data === null) return value;\n        cache.writeFragment(__assign(__assign({}, options), {\n          data: data\n        }));\n        return data;\n      }\n    });\n  };\n  return ApolloCache;\n}();\nexport { ApolloCache };\nif (globalThis.__DEV__ !== false) {\n  ApolloCache.prototype.getMemoryInternals = getApolloCacheMemoryInternals;\n}","map":{"version":3,"names":["wrap","Observable","cacheSizes","getFragmentDefinition","getFragmentQueryDocument","mergeDeepArray","WeakCache","getApolloCacheMemoryInternals","equalByQuery","invariant","maskFragment","ApolloCache","assumeImmutableResults","getFragmentDoc","max","cache","prototype","lookupFragment","fragmentName","batch","options","_this","optimisticId","optimistic","updateResult","performTransaction","update","recordOptimisticTransaction","transaction","transformDocument","document","transformForLink","identify","object","gc","modify","readQuery","read","__assign","rootId","id","watchFragment","fragment","from","_a","otherOptions","__rest","query","dataMasking","Symbol","for","globalThis","__DEV__","actualFragmentName","name","value","warn","diffOptions","returnPartialData","latestDiff","observer","watch","immediate","callback","diff","data","result","variables","complete","missing","map","error","next","readFragment","writeQuery","write","Object","assign","dataId","writeFragment","updateQuery","updateFragment","getMemoryInternals"],"sources":["C:\\bootcamp\\PICKFORD---LACE\\client\\node_modules\\@apollo\\src\\cache\\core\\cache.ts"],"sourcesContent":["import type {\n  DocumentNode,\n  FragmentDefinitionNode,\n  InlineFragmentNode,\n} from \"graphql\";\nimport { wrap } from \"optimism\";\n\nimport type {\n  StoreObject,\n  Reference,\n  DeepPartial,\n  NoInfer,\n} from \"../../utilities/index.js\";\nimport {\n  Observable,\n  cacheSizes,\n  defaultCacheSizes,\n  getFragmentDefinition,\n  getFragmentQueryDocument,\n  mergeDeepArray,\n} from \"../../utilities/index.js\";\nimport type { DataProxy } from \"./types/DataProxy.js\";\nimport type { Cache } from \"./types/Cache.js\";\nimport { WeakCache } from \"@wry/caches\";\nimport { getApolloCacheMemoryInternals } from \"../../utilities/caching/getMemoryInternals.js\";\nimport type {\n  OperationVariables,\n  TypedDocumentNode,\n} from \"../../core/types.js\";\nimport type { MissingTree } from \"./types/common.js\";\nimport { equalByQuery } from \"../../core/equalByQuery.js\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { maskFragment } from \"../../masking/index.js\";\nimport type {\n  FragmentType,\n  MaybeMasked,\n  Unmasked,\n} from \"../../masking/index.js\";\n\nexport type Transaction<T> = (c: ApolloCache<T>) => void;\n\n/**\n * Watched fragment options.\n */\nexport interface WatchFragmentOptions<TData, TVars> {\n  /**\n   * A GraphQL fragment document parsed into an AST with the `gql`\n   * template literal.\n   *\n   * @docGroup 1. Required options\n   */\n  fragment: DocumentNode | TypedDocumentNode<TData, TVars>;\n  /**\n   * An object containing a `__typename` and primary key fields\n   * (such as `id`) identifying the entity object from which the fragment will\n   * be retrieved, or a `{ __ref: \"...\" }` reference, or a `string` ID\n   * (uncommon).\n   *\n   * @docGroup 1. Required options\n   */\n  from: StoreObject | Reference | FragmentType<NoInfer<TData>> | string;\n  /**\n   * Any variables that the GraphQL fragment may depend on.\n   *\n   * @docGroup 2. Cache options\n   */\n  variables?: TVars;\n  /**\n   * The name of the fragment defined in the fragment document.\n   *\n   * Required if the fragment document includes more than one fragment,\n   * optional otherwise.\n   *\n   * @docGroup 2. Cache options\n   */\n  fragmentName?: string;\n  /**\n   * If `true`, `watchFragment` returns optimistic results.\n   *\n   * The default value is `true`.\n   *\n   * @docGroup 2. Cache options\n   */\n  optimistic?: boolean;\n}\n\n/**\n * Watched fragment results.\n */\nexport type WatchFragmentResult<TData> =\n  | {\n      data: MaybeMasked<TData>;\n      complete: true;\n      missing?: never;\n    }\n  | {\n      data: DeepPartial<MaybeMasked<TData>>;\n      complete: false;\n      missing: MissingTree;\n    };\n\nexport abstract class ApolloCache<TSerialized> implements DataProxy {\n  public readonly assumeImmutableResults: boolean = false;\n\n  // required to implement\n  // core API\n  public abstract read<TData = any, TVariables = any>(\n    query: Cache.ReadOptions<TVariables, TData>\n  ): Unmasked<TData> | null;\n  public abstract write<TData = any, TVariables = any>(\n    write: Cache.WriteOptions<TData, TVariables>\n  ): Reference | undefined;\n  public abstract diff<T>(query: Cache.DiffOptions): Cache.DiffResult<T>;\n  public abstract watch<TData = any, TVariables = any>(\n    watch: Cache.WatchOptions<TData, TVariables>\n  ): () => void;\n\n  // Empty the cache and restart all current watches (unless\n  // options.discardWatches is true).\n  public abstract reset(options?: Cache.ResetOptions): Promise<void>;\n\n  // Remove whole objects from the cache by passing just options.id, or\n  // specific fields by passing options.field and/or options.args. If no\n  // options.args are provided, all fields matching options.field (even\n  // those with arguments) will be removed. Returns true iff any data was\n  // removed from the cache.\n  public abstract evict(options: Cache.EvictOptions): boolean;\n\n  // initializer / offline / ssr API\n  /**\n   * Replaces existing state in the cache (if any) with the values expressed by\n   * `serializedState`.\n   *\n   * Called when hydrating a cache (server side rendering, or offline storage),\n   * and also (potentially) during hot reloads.\n   */\n  public abstract restore(\n    serializedState: TSerialized\n  ): ApolloCache<TSerialized>;\n\n  /**\n   * Exposes the cache's complete state, in a serializable format for later restoration.\n   */\n  public abstract extract(optimistic?: boolean): TSerialized;\n\n  // Optimistic API\n\n  public abstract removeOptimistic(id: string): void;\n\n  // Data masking API\n\n  // Used by data masking to determine if an inline fragment with a type\n  // condition matches a given typename.\n  //\n  // If not implemented by a cache subclass, data masking will effectively be\n  // disabled since we will not be able to accurately determine if a given type\n  // condition for a union or interface matches a particular type.\n  public fragmentMatches?(\n    fragment: InlineFragmentNode,\n    typename: string\n  ): boolean;\n\n  // Function used to lookup a fragment when a fragment definition is not part\n  // of the GraphQL document. This is useful for caches, such as InMemoryCache,\n  // that register fragments ahead of time so they can be referenced by name.\n  public lookupFragment(fragmentName: string): FragmentDefinitionNode | null {\n    return null;\n  }\n\n  // Transactional API\n\n  // The batch method is intended to replace/subsume both performTransaction\n  // and recordOptimisticTransaction, but performTransaction came first, so we\n  // provide a default batch implementation that's just another way of calling\n  // performTransaction. Subclasses of ApolloCache (such as InMemoryCache) can\n  // override the batch method to do more interesting things with its options.\n  public batch<U>(options: Cache.BatchOptions<this, U>): U {\n    const optimisticId =\n      typeof options.optimistic === \"string\" ? options.optimistic\n      : options.optimistic === false ? null\n      : void 0;\n    let updateResult: U;\n    this.performTransaction(\n      () => (updateResult = options.update(this)),\n      optimisticId\n    );\n    return updateResult!;\n  }\n\n  public abstract performTransaction(\n    transaction: Transaction<TSerialized>,\n    // Although subclasses may implement recordOptimisticTransaction\n    // however they choose, the default implementation simply calls\n    // performTransaction with a string as the second argument, allowing\n    // performTransaction to handle both optimistic and non-optimistic\n    // (broadcast-batching) transactions. Passing null for optimisticId is\n    // also allowed, and indicates that performTransaction should apply\n    // the transaction non-optimistically (ignoring optimistic data).\n    optimisticId?: string | null\n  ): void;\n\n  public recordOptimisticTransaction(\n    transaction: Transaction<TSerialized>,\n    optimisticId: string\n  ) {\n    this.performTransaction(transaction, optimisticId);\n  }\n\n  // Optional API\n\n  // Called once per input document, allowing the cache to make static changes\n  // to the query, such as adding __typename fields.\n  public transformDocument(document: DocumentNode): DocumentNode {\n    return document;\n  }\n\n  // Called before each ApolloLink request, allowing the cache to make dynamic\n  // changes to the query, such as filling in missing fragment definitions.\n  public transformForLink(document: DocumentNode): DocumentNode {\n    return document;\n  }\n\n  public identify(object: StoreObject | Reference): string | undefined {\n    return;\n  }\n\n  public gc(): string[] {\n    return [];\n  }\n\n  public modify<Entity extends Record<string, any> = Record<string, any>>(\n    options: Cache.ModifyOptions<Entity>\n  ): boolean {\n    return false;\n  }\n\n  // DataProxy API\n  public readQuery<QueryType, TVariables = any>(\n    options: Cache.ReadQueryOptions<QueryType, TVariables>,\n    optimistic = !!options.optimistic\n  ): Unmasked<QueryType> | null {\n    return this.read({\n      ...options,\n      rootId: options.id || \"ROOT_QUERY\",\n      optimistic,\n    });\n  }\n\n  /** {@inheritDoc @apollo/client!ApolloClient#watchFragment:member(1)} */\n  public watchFragment<TData = any, TVars = OperationVariables>(\n    options: WatchFragmentOptions<TData, TVars>\n  ): Observable<WatchFragmentResult<TData>> {\n    const {\n      fragment,\n      fragmentName,\n      from,\n      optimistic = true,\n      ...otherOptions\n    } = options;\n    const query = this.getFragmentDoc(fragment, fragmentName);\n    // While our TypeScript types do not allow for `undefined` as a valid\n    // `from`, its possible `useFragment` gives us an `undefined` since it\n    // calls` cache.identify` and provides that value to `from`. We are\n    // adding this fix here however to ensure those using plain JavaScript\n    // and using `cache.identify` themselves will avoid seeing the obscure\n    // warning.\n    const id =\n      typeof from === \"undefined\" || typeof from === \"string\" ?\n        from\n      : this.identify(from);\n    const dataMasking = !!(options as any)[Symbol.for(\"apollo.dataMasking\")];\n\n    if (__DEV__) {\n      const actualFragmentName =\n        fragmentName || getFragmentDefinition(fragment).name.value;\n\n      if (!id) {\n        invariant.warn(\n          \"Could not identify object passed to `from` for '%s' fragment, either because the object is non-normalized or the key fields are missing. If you are masking this object, please ensure the key fields are requested by the parent object.\",\n          actualFragmentName\n        );\n      }\n    }\n\n    const diffOptions: Cache.DiffOptions<TData, TVars> = {\n      ...otherOptions,\n      returnPartialData: true,\n      id,\n      query,\n      optimistic,\n    };\n\n    let latestDiff: DataProxy.DiffResult<TData> | undefined;\n\n    return new Observable((observer) => {\n      return this.watch<TData, TVars>({\n        ...diffOptions,\n        immediate: true,\n        callback: (diff) => {\n          const data =\n            dataMasking ?\n              maskFragment(diff.result, fragment, this, fragmentName)\n            : diff.result;\n\n          if (\n            // Always ensure we deliver the first result\n            latestDiff &&\n            equalByQuery(\n              query,\n              { data: latestDiff.result },\n              { data },\n              // TODO: Fix the type on WatchFragmentOptions so that TVars\n              // extends OperationVariables\n              options.variables as OperationVariables\n            )\n          ) {\n            return;\n          }\n\n          const result = {\n            data,\n            complete: !!diff.complete,\n          } as WatchFragmentResult<TData>;\n\n          if (diff.missing) {\n            result.missing = mergeDeepArray(\n              diff.missing.map((error) => error.missing)\n            );\n          }\n\n          latestDiff = { ...diff, result: data };\n          observer.next(result);\n        },\n      });\n    });\n  }\n\n  // Make sure we compute the same (===) fragment query document every\n  // time we receive the same fragment in readFragment.\n  private getFragmentDoc = wrap(getFragmentQueryDocument, {\n    max:\n      cacheSizes[\"cache.fragmentQueryDocuments\"] ||\n      defaultCacheSizes[\"cache.fragmentQueryDocuments\"],\n    cache: WeakCache,\n  });\n\n  public readFragment<FragmentType, TVariables = any>(\n    options: Cache.ReadFragmentOptions<FragmentType, TVariables>,\n    optimistic = !!options.optimistic\n  ): Unmasked<FragmentType> | null {\n    return this.read({\n      ...options,\n      query: this.getFragmentDoc(options.fragment, options.fragmentName),\n      rootId: options.id,\n      optimistic,\n    });\n  }\n\n  public writeQuery<TData = any, TVariables = any>({\n    id,\n    data,\n    ...options\n  }: Cache.WriteQueryOptions<TData, TVariables>): Reference | undefined {\n    return this.write(\n      Object.assign(options, {\n        dataId: id || \"ROOT_QUERY\",\n        result: data,\n      })\n    );\n  }\n\n  public writeFragment<TData = any, TVariables = any>({\n    id,\n    data,\n    fragment,\n    fragmentName,\n    ...options\n  }: Cache.WriteFragmentOptions<TData, TVariables>): Reference | undefined {\n    return this.write(\n      Object.assign(options, {\n        query: this.getFragmentDoc(fragment, fragmentName),\n        dataId: id,\n        result: data,\n      })\n    );\n  }\n\n  public updateQuery<TData = any, TVariables = any>(\n    options: Cache.UpdateQueryOptions<TData, TVariables>,\n    update: (data: Unmasked<TData> | null) => Unmasked<TData> | null | void\n  ): Unmasked<TData> | null {\n    return this.batch({\n      update(cache) {\n        const value = cache.readQuery<TData, TVariables>(options);\n        const data = update(value);\n        if (data === void 0 || data === null) return value;\n        cache.writeQuery<TData, TVariables>({ ...options, data });\n        return data;\n      },\n    });\n  }\n\n  public updateFragment<TData = any, TVariables = any>(\n    options: Cache.UpdateFragmentOptions<TData, TVariables>,\n    update: (data: Unmasked<TData> | null) => Unmasked<TData> | null | void\n  ): Unmasked<TData> | null {\n    return this.batch({\n      update(cache) {\n        const value = cache.readFragment<TData, TVariables>(options);\n        const data = update(value);\n        if (data === void 0 || data === null) return value;\n        cache.writeFragment<TData, TVariables>({ ...options, data });\n        return data;\n      },\n    });\n  }\n\n  /**\n   * @experimental\n   * @internal\n   * This is not a stable API - it is used in development builds to expose\n   * information to the DevTools.\n   * Use at your own risk!\n   */\n  public getMemoryInternals?: typeof getApolloCacheMemoryInternals;\n}\n\nif (__DEV__) {\n  ApolloCache.prototype.getMemoryInternals = getApolloCacheMemoryInternals;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}