{"ast":null,"code":"import { printBlockString } from '../language/blockString.mjs';\nimport { isPunctuatorTokenKind, Lexer } from '../language/lexer.mjs';\nimport { isSource, Source } from '../language/source.mjs';\nimport { TokenKind } from '../language/tokenKind.mjs';\n/**\r\n * Strips characters that are not significant to the validity or execution\r\n * of a GraphQL document:\r\n *   - UnicodeBOM\r\n *   - WhiteSpace\r\n *   - LineTerminator\r\n *   - Comment\r\n *   - Comma\r\n *   - BlockString indentation\r\n *\r\n * Note: It is required to have a delimiter character between neighboring\r\n * non-punctuator tokens and this function always uses single space as delimiter.\r\n *\r\n * It is guaranteed that both input and output documents if parsed would result\r\n * in the exact same AST except for nodes location.\r\n *\r\n * Warning: It is guaranteed that this function will always produce stable results.\r\n * However, it's not guaranteed that it will stay the same between different\r\n * releases due to bugfixes or changes in the GraphQL specification.\r\n *\r\n * Query example:\r\n *\r\n * ```graphql\r\n * query SomeQuery($foo: String!, $bar: String) {\r\n *   someField(foo: $foo, bar: $bar) {\r\n *     a\r\n *     b {\r\n *       c\r\n *       d\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * Becomes:\r\n *\r\n * ```graphql\r\n * query SomeQuery($foo:String!$bar:String){someField(foo:$foo bar:$bar){a b{c d}}}\r\n * ```\r\n *\r\n * SDL example:\r\n *\r\n * ```graphql\r\n * \"\"\"\r\n * Type description\r\n * \"\"\"\r\n * type Foo {\r\n *   \"\"\"\r\n *   Field description\r\n *   \"\"\"\r\n *   bar: String\r\n * }\r\n * ```\r\n *\r\n * Becomes:\r\n *\r\n * ```graphql\r\n * \"\"\"Type description\"\"\" type Foo{\"\"\"Field description\"\"\" bar:String}\r\n * ```\r\n */\n\nexport function stripIgnoredCharacters(source) {\n  const sourceObj = isSource(source) ? source : new Source(source);\n  const body = sourceObj.body;\n  const lexer = new Lexer(sourceObj);\n  let strippedBody = '';\n  let wasLastAddedTokenNonPunctuator = false;\n  while (lexer.advance().kind !== TokenKind.EOF) {\n    const currentToken = lexer.token;\n    const tokenKind = currentToken.kind;\n    /**\r\n     * Every two non-punctuator tokens should have space between them.\r\n     * Also prevent case of non-punctuator token following by spread resulting\r\n     * in invalid token (e.g. `1...` is invalid Float token).\r\n     */\n\n    const isNonPunctuator = !isPunctuatorTokenKind(currentToken.kind);\n    if (wasLastAddedTokenNonPunctuator) {\n      if (isNonPunctuator || currentToken.kind === TokenKind.SPREAD) {\n        strippedBody += ' ';\n      }\n    }\n    const tokenBody = body.slice(currentToken.start, currentToken.end);\n    if (tokenKind === TokenKind.BLOCK_STRING) {\n      strippedBody += printBlockString(currentToken.value, {\n        minimize: true\n      });\n    } else {\n      strippedBody += tokenBody;\n    }\n    wasLastAddedTokenNonPunctuator = isNonPunctuator;\n  }\n  return strippedBody;\n}","map":{"version":3,"names":["printBlockString","isPunctuatorTokenKind","Lexer","isSource","Source","TokenKind","stripIgnoredCharacters","source","sourceObj","body","lexer","strippedBody","wasLastAddedTokenNonPunctuator","advance","kind","EOF","currentToken","token","tokenKind","isNonPunctuator","SPREAD","tokenBody","slice","start","end","BLOCK_STRING","value","minimize"],"sources":["C:/bootcamp/PICKFORD---LACE/client/node_modules/graphql/utilities/stripIgnoredCharacters.mjs"],"sourcesContent":["import { printBlockString } from '../language/blockString.mjs';\r\nimport { isPunctuatorTokenKind, Lexer } from '../language/lexer.mjs';\r\nimport { isSource, Source } from '../language/source.mjs';\r\nimport { TokenKind } from '../language/tokenKind.mjs';\r\n/**\r\n * Strips characters that are not significant to the validity or execution\r\n * of a GraphQL document:\r\n *   - UnicodeBOM\r\n *   - WhiteSpace\r\n *   - LineTerminator\r\n *   - Comment\r\n *   - Comma\r\n *   - BlockString indentation\r\n *\r\n * Note: It is required to have a delimiter character between neighboring\r\n * non-punctuator tokens and this function always uses single space as delimiter.\r\n *\r\n * It is guaranteed that both input and output documents if parsed would result\r\n * in the exact same AST except for nodes location.\r\n *\r\n * Warning: It is guaranteed that this function will always produce stable results.\r\n * However, it's not guaranteed that it will stay the same between different\r\n * releases due to bugfixes or changes in the GraphQL specification.\r\n *\r\n * Query example:\r\n *\r\n * ```graphql\r\n * query SomeQuery($foo: String!, $bar: String) {\r\n *   someField(foo: $foo, bar: $bar) {\r\n *     a\r\n *     b {\r\n *       c\r\n *       d\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * Becomes:\r\n *\r\n * ```graphql\r\n * query SomeQuery($foo:String!$bar:String){someField(foo:$foo bar:$bar){a b{c d}}}\r\n * ```\r\n *\r\n * SDL example:\r\n *\r\n * ```graphql\r\n * \"\"\"\r\n * Type description\r\n * \"\"\"\r\n * type Foo {\r\n *   \"\"\"\r\n *   Field description\r\n *   \"\"\"\r\n *   bar: String\r\n * }\r\n * ```\r\n *\r\n * Becomes:\r\n *\r\n * ```graphql\r\n * \"\"\"Type description\"\"\" type Foo{\"\"\"Field description\"\"\" bar:String}\r\n * ```\r\n */\r\n\r\nexport function stripIgnoredCharacters(source) {\r\n  const sourceObj = isSource(source) ? source : new Source(source);\r\n  const body = sourceObj.body;\r\n  const lexer = new Lexer(sourceObj);\r\n  let strippedBody = '';\r\n  let wasLastAddedTokenNonPunctuator = false;\r\n\r\n  while (lexer.advance().kind !== TokenKind.EOF) {\r\n    const currentToken = lexer.token;\r\n    const tokenKind = currentToken.kind;\r\n    /**\r\n     * Every two non-punctuator tokens should have space between them.\r\n     * Also prevent case of non-punctuator token following by spread resulting\r\n     * in invalid token (e.g. `1...` is invalid Float token).\r\n     */\r\n\r\n    const isNonPunctuator = !isPunctuatorTokenKind(currentToken.kind);\r\n\r\n    if (wasLastAddedTokenNonPunctuator) {\r\n      if (isNonPunctuator || currentToken.kind === TokenKind.SPREAD) {\r\n        strippedBody += ' ';\r\n      }\r\n    }\r\n\r\n    const tokenBody = body.slice(currentToken.start, currentToken.end);\r\n\r\n    if (tokenKind === TokenKind.BLOCK_STRING) {\r\n      strippedBody += printBlockString(currentToken.value, {\r\n        minimize: true,\r\n      });\r\n    } else {\r\n      strippedBody += tokenBody;\r\n    }\r\n\r\n    wasLastAddedTokenNonPunctuator = isNonPunctuator;\r\n  }\r\n\r\n  return strippedBody;\r\n}\r\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,6BAA6B;AAC9D,SAASC,qBAAqB,EAAEC,KAAK,QAAQ,uBAAuB;AACpE,SAASC,QAAQ,EAAEC,MAAM,QAAQ,wBAAwB;AACzD,SAASC,SAAS,QAAQ,2BAA2B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,sBAAsBA,CAACC,MAAM,EAAE;EAC7C,MAAMC,SAAS,GAAGL,QAAQ,CAACI,MAAM,CAAC,GAAGA,MAAM,GAAG,IAAIH,MAAM,CAACG,MAAM,CAAC;EAChE,MAAME,IAAI,GAAGD,SAAS,CAACC,IAAI;EAC3B,MAAMC,KAAK,GAAG,IAAIR,KAAK,CAACM,SAAS,CAAC;EAClC,IAAIG,YAAY,GAAG,EAAE;EACrB,IAAIC,8BAA8B,GAAG,KAAK;EAE1C,OAAOF,KAAK,CAACG,OAAO,CAAC,CAAC,CAACC,IAAI,KAAKT,SAAS,CAACU,GAAG,EAAE;IAC7C,MAAMC,YAAY,GAAGN,KAAK,CAACO,KAAK;IAChC,MAAMC,SAAS,GAAGF,YAAY,CAACF,IAAI;IACnC;AACJ;AACA;AACA;AACA;;IAEI,MAAMK,eAAe,GAAG,CAAClB,qBAAqB,CAACe,YAAY,CAACF,IAAI,CAAC;IAEjE,IAAIF,8BAA8B,EAAE;MAClC,IAAIO,eAAe,IAAIH,YAAY,CAACF,IAAI,KAAKT,SAAS,CAACe,MAAM,EAAE;QAC7DT,YAAY,IAAI,GAAG;MACrB;IACF;IAEA,MAAMU,SAAS,GAAGZ,IAAI,CAACa,KAAK,CAACN,YAAY,CAACO,KAAK,EAAEP,YAAY,CAACQ,GAAG,CAAC;IAElE,IAAIN,SAAS,KAAKb,SAAS,CAACoB,YAAY,EAAE;MACxCd,YAAY,IAAIX,gBAAgB,CAACgB,YAAY,CAACU,KAAK,EAAE;QACnDC,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ,CAAC,MAAM;MACLhB,YAAY,IAAIU,SAAS;IAC3B;IAEAT,8BAA8B,GAAGO,eAAe;EAClD;EAEA,OAAOR,YAAY;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}