{"ast":null,"code":"import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { isInputObjectType, isLeafType, isListType, isNonNullType } from '../type/definition.mjs';\n/**\r\n * Produces a JavaScript value given a GraphQL Value AST.\r\n *\r\n * A GraphQL type must be provided, which will be used to interpret different\r\n * GraphQL Value literals.\r\n *\r\n * Returns `undefined` when the value could not be validly coerced according to\r\n * the provided type.\r\n *\r\n * | GraphQL Value        | JSON Value    |\r\n * | -------------------- | ------------- |\r\n * | Input Object         | Object        |\r\n * | List                 | Array         |\r\n * | Boolean              | Boolean       |\r\n * | String               | String        |\r\n * | Int / Float          | Number        |\r\n * | Enum Value           | Unknown       |\r\n * | NullValue            | null          |\r\n *\r\n */\n\nexport function valueFromAST(valueNode, type, variables) {\n  if (!valueNode) {\n    // When there is no node, then there is also no value.\n    // Importantly, this is different from returning the value null.\n    return;\n  }\n  if (valueNode.kind === Kind.VARIABLE) {\n    const variableName = valueNode.name.value;\n    if (variables == null || variables[variableName] === undefined) {\n      // No valid return value.\n      return;\n    }\n    const variableValue = variables[variableName];\n    if (variableValue === null && isNonNullType(type)) {\n      return; // Invalid: intentionally return no value.\n    } // Note: This does no further checking that this variable is correct.\n    // This assumes that this query has been validated and the variable\n    // usage here is of the correct type.\n\n    return variableValue;\n  }\n  if (isNonNullType(type)) {\n    if (valueNode.kind === Kind.NULL) {\n      return; // Invalid: intentionally return no value.\n    }\n    return valueFromAST(valueNode, type.ofType, variables);\n  }\n  if (valueNode.kind === Kind.NULL) {\n    // This is explicitly returning the value null.\n    return null;\n  }\n  if (isListType(type)) {\n    const itemType = type.ofType;\n    if (valueNode.kind === Kind.LIST) {\n      const coercedValues = [];\n      for (const itemNode of valueNode.values) {\n        if (isMissingVariable(itemNode, variables)) {\n          // If an array contains a missing variable, it is either coerced to\n          // null or if the item type is non-null, it considered invalid.\n          if (isNonNullType(itemType)) {\n            return; // Invalid: intentionally return no value.\n          }\n          coercedValues.push(null);\n        } else {\n          const itemValue = valueFromAST(itemNode, itemType, variables);\n          if (itemValue === undefined) {\n            return; // Invalid: intentionally return no value.\n          }\n          coercedValues.push(itemValue);\n        }\n      }\n      return coercedValues;\n    }\n    const coercedValue = valueFromAST(valueNode, itemType, variables);\n    if (coercedValue === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n    return [coercedValue];\n  }\n  if (isInputObjectType(type)) {\n    if (valueNode.kind !== Kind.OBJECT) {\n      return; // Invalid: intentionally return no value.\n    }\n    const coercedObj = Object.create(null);\n    const fieldNodes = keyMap(valueNode.fields, field => field.name.value);\n    for (const field of Object.values(type.getFields())) {\n      const fieldNode = fieldNodes[field.name];\n      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {\n        if (field.defaultValue !== undefined) {\n          coercedObj[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          return; // Invalid: intentionally return no value.\n        }\n        continue;\n      }\n      const fieldValue = valueFromAST(fieldNode.value, field.type, variables);\n      if (fieldValue === undefined) {\n        return; // Invalid: intentionally return no value.\n      }\n      coercedObj[field.name] = fieldValue;\n    }\n    if (type.isOneOf) {\n      const keys = Object.keys(coercedObj);\n      if (keys.length !== 1) {\n        return; // Invalid: not exactly one key, intentionally return no value.\n      }\n      if (coercedObj[keys[0]] === null) {\n        return; // Invalid: value not non-null, intentionally return no value.\n      }\n    }\n    return coercedObj;\n  }\n  if (isLeafType(type)) {\n    // Scalars and Enums fulfill parsing a literal value via parseLiteral().\n    // Invalid values represent a failure to parse correctly, in which case\n    // no value is returned.\n    let result;\n    try {\n      result = type.parseLiteral(valueNode, variables);\n    } catch (_error) {\n      return; // Invalid: intentionally return no value.\n    }\n    if (result === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n    return result;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible input types have been considered.\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n} // Returns true if the provided valueNode is a variable which is not defined\n// in the set of variables.\n\nfunction isMissingVariable(valueNode, variables) {\n  return valueNode.kind === Kind.VARIABLE && (variables == null || variables[valueNode.name.value] === undefined);\n}","map":{"version":3,"names":["inspect","invariant","keyMap","Kind","isInputObjectType","isLeafType","isListType","isNonNullType","valueFromAST","valueNode","type","variables","kind","VARIABLE","variableName","name","value","undefined","variableValue","NULL","ofType","itemType","LIST","coercedValues","itemNode","values","isMissingVariable","push","itemValue","coercedValue","OBJECT","coercedObj","Object","create","fieldNodes","fields","field","getFields","fieldNode","defaultValue","fieldValue","isOneOf","keys","length","result","parseLiteral","_error"],"sources":["C:/bootcamp/PICKFORD---LACE/client/node_modules/graphql/utilities/valueFromAST.mjs"],"sourcesContent":["import { inspect } from '../jsutils/inspect.mjs';\r\nimport { invariant } from '../jsutils/invariant.mjs';\r\nimport { keyMap } from '../jsutils/keyMap.mjs';\r\nimport { Kind } from '../language/kinds.mjs';\r\nimport {\r\n  isInputObjectType,\r\n  isLeafType,\r\n  isListType,\r\n  isNonNullType,\r\n} from '../type/definition.mjs';\r\n/**\r\n * Produces a JavaScript value given a GraphQL Value AST.\r\n *\r\n * A GraphQL type must be provided, which will be used to interpret different\r\n * GraphQL Value literals.\r\n *\r\n * Returns `undefined` when the value could not be validly coerced according to\r\n * the provided type.\r\n *\r\n * | GraphQL Value        | JSON Value    |\r\n * | -------------------- | ------------- |\r\n * | Input Object         | Object        |\r\n * | List                 | Array         |\r\n * | Boolean              | Boolean       |\r\n * | String               | String        |\r\n * | Int / Float          | Number        |\r\n * | Enum Value           | Unknown       |\r\n * | NullValue            | null          |\r\n *\r\n */\r\n\r\nexport function valueFromAST(valueNode, type, variables) {\r\n  if (!valueNode) {\r\n    // When there is no node, then there is also no value.\r\n    // Importantly, this is different from returning the value null.\r\n    return;\r\n  }\r\n\r\n  if (valueNode.kind === Kind.VARIABLE) {\r\n    const variableName = valueNode.name.value;\r\n\r\n    if (variables == null || variables[variableName] === undefined) {\r\n      // No valid return value.\r\n      return;\r\n    }\r\n\r\n    const variableValue = variables[variableName];\r\n\r\n    if (variableValue === null && isNonNullType(type)) {\r\n      return; // Invalid: intentionally return no value.\r\n    } // Note: This does no further checking that this variable is correct.\r\n    // This assumes that this query has been validated and the variable\r\n    // usage here is of the correct type.\r\n\r\n    return variableValue;\r\n  }\r\n\r\n  if (isNonNullType(type)) {\r\n    if (valueNode.kind === Kind.NULL) {\r\n      return; // Invalid: intentionally return no value.\r\n    }\r\n\r\n    return valueFromAST(valueNode, type.ofType, variables);\r\n  }\r\n\r\n  if (valueNode.kind === Kind.NULL) {\r\n    // This is explicitly returning the value null.\r\n    return null;\r\n  }\r\n\r\n  if (isListType(type)) {\r\n    const itemType = type.ofType;\r\n\r\n    if (valueNode.kind === Kind.LIST) {\r\n      const coercedValues = [];\r\n\r\n      for (const itemNode of valueNode.values) {\r\n        if (isMissingVariable(itemNode, variables)) {\r\n          // If an array contains a missing variable, it is either coerced to\r\n          // null or if the item type is non-null, it considered invalid.\r\n          if (isNonNullType(itemType)) {\r\n            return; // Invalid: intentionally return no value.\r\n          }\r\n\r\n          coercedValues.push(null);\r\n        } else {\r\n          const itemValue = valueFromAST(itemNode, itemType, variables);\r\n\r\n          if (itemValue === undefined) {\r\n            return; // Invalid: intentionally return no value.\r\n          }\r\n\r\n          coercedValues.push(itemValue);\r\n        }\r\n      }\r\n\r\n      return coercedValues;\r\n    }\r\n\r\n    const coercedValue = valueFromAST(valueNode, itemType, variables);\r\n\r\n    if (coercedValue === undefined) {\r\n      return; // Invalid: intentionally return no value.\r\n    }\r\n\r\n    return [coercedValue];\r\n  }\r\n\r\n  if (isInputObjectType(type)) {\r\n    if (valueNode.kind !== Kind.OBJECT) {\r\n      return; // Invalid: intentionally return no value.\r\n    }\r\n\r\n    const coercedObj = Object.create(null);\r\n    const fieldNodes = keyMap(valueNode.fields, (field) => field.name.value);\r\n\r\n    for (const field of Object.values(type.getFields())) {\r\n      const fieldNode = fieldNodes[field.name];\r\n\r\n      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {\r\n        if (field.defaultValue !== undefined) {\r\n          coercedObj[field.name] = field.defaultValue;\r\n        } else if (isNonNullType(field.type)) {\r\n          return; // Invalid: intentionally return no value.\r\n        }\r\n\r\n        continue;\r\n      }\r\n\r\n      const fieldValue = valueFromAST(fieldNode.value, field.type, variables);\r\n\r\n      if (fieldValue === undefined) {\r\n        return; // Invalid: intentionally return no value.\r\n      }\r\n\r\n      coercedObj[field.name] = fieldValue;\r\n    }\r\n\r\n    if (type.isOneOf) {\r\n      const keys = Object.keys(coercedObj);\r\n\r\n      if (keys.length !== 1) {\r\n        return; // Invalid: not exactly one key, intentionally return no value.\r\n      }\r\n\r\n      if (coercedObj[keys[0]] === null) {\r\n        return; // Invalid: value not non-null, intentionally return no value.\r\n      }\r\n    }\r\n\r\n    return coercedObj;\r\n  }\r\n\r\n  if (isLeafType(type)) {\r\n    // Scalars and Enums fulfill parsing a literal value via parseLiteral().\r\n    // Invalid values represent a failure to parse correctly, in which case\r\n    // no value is returned.\r\n    let result;\r\n\r\n    try {\r\n      result = type.parseLiteral(valueNode, variables);\r\n    } catch (_error) {\r\n      return; // Invalid: intentionally return no value.\r\n    }\r\n\r\n    if (result === undefined) {\r\n      return; // Invalid: intentionally return no value.\r\n    }\r\n\r\n    return result;\r\n  }\r\n  /* c8 ignore next 3 */\r\n  // Not reachable, all possible input types have been considered.\r\n\r\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\r\n} // Returns true if the provided valueNode is a variable which is not defined\r\n// in the set of variables.\r\n\r\nfunction isMissingVariable(valueNode, variables) {\r\n  return (\r\n    valueNode.kind === Kind.VARIABLE &&\r\n    (variables == null || variables[valueNode.name.value] === undefined)\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}