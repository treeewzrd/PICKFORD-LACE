{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { equal } from \"@wry/equality\";\nimport { DeepMerger } from \"../utilities/index.js\";\nimport { mergeIncrementalData } from \"../utilities/index.js\";\nimport { isNonEmptyArray, graphQLResultHasError, canUseWeakMap } from \"../utilities/index.js\";\nimport { NetworkStatus } from \"./networkStatus.js\";\nvar destructiveMethodCounts = new (canUseWeakMap ? WeakMap : Map)();\nfunction wrapDestructiveCacheMethod(cache, methodName) {\n  var original = cache[methodName];\n  if (typeof original === \"function\") {\n    // @ts-expect-error this is just too generic to be typed correctly\n    cache[methodName] = function () {\n      destructiveMethodCounts.set(cache,\n      // The %1e15 allows the count to wrap around to 0 safely every\n      // quadrillion evictions, so there's no risk of overflow. To be\n      // clear, this is more of a pedantic principle than something\n      // that matters in any conceivable practical scenario.\n      (destructiveMethodCounts.get(cache) + 1) % 1e15);\n      // @ts-expect-error this is just too generic to be typed correctly\n      return original.apply(this, arguments);\n    };\n  }\n}\n// A QueryInfo object represents a single query managed by the\n// QueryManager, which tracks all QueryInfo objects by queryId in its\n// this.queries Map. QueryInfo objects store the latest results and errors\n// for the given query, and are responsible for reporting those results to\n// the corresponding ObservableQuery, via the QueryInfo.notify method.\n// Results are reported asynchronously whenever setDiff marks the\n// QueryInfo object as dirty, though a call to the QueryManager's\n// broadcastQueries method may trigger the notification before it happens\n// automatically. This class used to be a simple interface type without\n// any field privacy or meaningful methods, which is why it still has so\n// many public fields. The effort to lock down and simplify the QueryInfo\n// interface is ongoing, and further improvements are welcome.\nvar QueryInfo = /** @class */function () {\n  function QueryInfo(queryManager, queryId) {\n    if (queryId === void 0) {\n      queryId = queryManager.generateQueryId();\n    }\n    this.queryId = queryId;\n    this.document = null;\n    this.lastRequestId = 1;\n    this.stopped = false;\n    this.observableQuery = null;\n    var cache = this.cache = queryManager.cache;\n    // Track how often cache.evict is called, since we want eviction to\n    // override the feud-stopping logic in the markResult method, by\n    // causing shouldWrite to return true. Wrapping the cache.evict method\n    // is a bit of a hack, but it saves us from having to make eviction\n    // counting an official part of the ApolloCache API.\n    if (!destructiveMethodCounts.has(cache)) {\n      destructiveMethodCounts.set(cache, 0);\n      wrapDestructiveCacheMethod(cache, \"evict\");\n      wrapDestructiveCacheMethod(cache, \"modify\");\n      wrapDestructiveCacheMethod(cache, \"reset\");\n    }\n  }\n  QueryInfo.prototype.init = function (query) {\n    var networkStatus = query.networkStatus || NetworkStatus.loading;\n    if (this.variables && this.networkStatus !== NetworkStatus.loading && !equal(this.variables, query.variables)) {\n      networkStatus = NetworkStatus.setVariables;\n    }\n    if (!equal(query.variables, this.variables)) {\n      this.lastDiff = void 0;\n      // Ensure we don't continue to receive cache updates for old variables\n      this.cancel();\n    }\n    Object.assign(this, {\n      document: query.document,\n      variables: query.variables,\n      networkError: null,\n      graphQLErrors: this.graphQLErrors || [],\n      networkStatus: networkStatus\n    });\n    if (query.observableQuery) {\n      this.setObservableQuery(query.observableQuery);\n    }\n    if (query.lastRequestId) {\n      this.lastRequestId = query.lastRequestId;\n    }\n    return this;\n  };\n  QueryInfo.prototype.resetDiff = function () {\n    this.lastDiff = void 0;\n  };\n  QueryInfo.prototype.getDiff = function () {\n    var options = this.getDiffOptions();\n    if (this.lastDiff && equal(options, this.lastDiff.options)) {\n      return this.lastDiff.diff;\n    }\n    this.updateWatch(this.variables);\n    var oq = this.observableQuery;\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return {\n        complete: false\n      };\n    }\n    var diff = this.cache.diff(options);\n    this.updateLastDiff(diff, options);\n    return diff;\n  };\n  QueryInfo.prototype.updateLastDiff = function (diff, options) {\n    this.lastDiff = diff ? {\n      diff: diff,\n      options: options || this.getDiffOptions()\n    } : void 0;\n  };\n  QueryInfo.prototype.getDiffOptions = function (variables) {\n    var _a;\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n    return {\n      query: this.document,\n      variables: variables,\n      returnPartialData: true,\n      optimistic: true,\n      canonizeResults: (_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a.options.canonizeResults\n    };\n  };\n  QueryInfo.prototype.setDiff = function (diff) {\n    var _a, _b;\n    var oldDiff = this.lastDiff && this.lastDiff.diff;\n    // If we are trying to deliver an incomplete cache result, we avoid\n    // reporting it if the query has errored, otherwise we let the broadcast try\n    // and repair the partial result by refetching the query. This check avoids\n    // a situation where a query that errors and another succeeds with\n    // overlapping data does not report the partial data result to the errored\n    // query.\n    //\n    // See https://github.com/apollographql/apollo-client/issues/11400 for more\n    // information on this issue.\n    if (diff && !diff.complete && ((_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a.getLastError())) {\n      return;\n    }\n    this.updateLastDiff(diff);\n    if (!equal(oldDiff && oldDiff.result, diff && diff.result)) {\n      (_b = this.observableQuery) === null || _b === void 0 ? void 0 : _b[\"scheduleNotify\"]();\n    }\n  };\n  QueryInfo.prototype.setObservableQuery = function (oq) {\n    if (oq === this.observableQuery) return;\n    this.observableQuery = oq;\n    if (oq) {\n      oq[\"queryInfo\"] = this;\n    }\n  };\n  QueryInfo.prototype.stop = function () {\n    var _a;\n    if (!this.stopped) {\n      this.stopped = true;\n      // Cancel the pending notify timeout\n      (_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a[\"resetNotifications\"]();\n      this.cancel();\n      var oq = this.observableQuery;\n      if (oq) oq.stopPolling();\n    }\n  };\n  QueryInfo.prototype.cancel = function () {\n    var _a;\n    (_a = this.cancelWatch) === null || _a === void 0 ? void 0 : _a.call(this);\n    this.cancelWatch = void 0;\n  };\n  QueryInfo.prototype.updateWatch = function (variables) {\n    var _this = this;\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n    var oq = this.observableQuery;\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return;\n    }\n    var watchOptions = __assign(__assign({}, this.getDiffOptions(variables)), {\n      watcher: this,\n      callback: function (diff) {\n        return _this.setDiff(diff);\n      }\n    });\n    if (!this.lastWatch || !equal(watchOptions, this.lastWatch)) {\n      this.cancel();\n      this.cancelWatch = this.cache.watch(this.lastWatch = watchOptions);\n    }\n  };\n  QueryInfo.prototype.resetLastWrite = function () {\n    this.lastWrite = void 0;\n  };\n  QueryInfo.prototype.shouldWrite = function (result, variables) {\n    var lastWrite = this.lastWrite;\n    return !(lastWrite &&\n    // If cache.evict has been called since the last time we wrote this\n    // data into the cache, there's a chance writing this result into\n    // the cache will repair what was evicted.\n    lastWrite.dmCount === destructiveMethodCounts.get(this.cache) && equal(variables, lastWrite.variables) && equal(result.data, lastWrite.result.data));\n  };\n  QueryInfo.prototype.markResult = function (result, document, options, cacheWriteBehavior) {\n    var _this = this;\n    var _a;\n    var merger = new DeepMerger();\n    var graphQLErrors = isNonEmptyArray(result.errors) ? result.errors.slice(0) : [];\n    // Cancel the pending notify timeout (if it exists) to prevent extraneous network\n    // requests. To allow future notify timeouts, diff and dirty are reset as well.\n    (_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a[\"resetNotifications\"]();\n    if (\"incremental\" in result && isNonEmptyArray(result.incremental)) {\n      var mergedData = mergeIncrementalData(this.getDiff().result, result);\n      result.data = mergedData;\n      // Detect the first chunk of a deferred query and merge it with existing\n      // cache data. This ensures a `cache-first` fetch policy that returns\n      // partial cache data or a `cache-and-network` fetch policy that already\n      // has full data in the cache does not complain when trying to merge the\n      // initial deferred server data with existing cache data.\n    } else if (\"hasNext\" in result && result.hasNext) {\n      var diff = this.getDiff();\n      result.data = merger.merge(diff.result, result.data);\n    }\n    this.graphQLErrors = graphQLErrors;\n    if (options.fetchPolicy === \"no-cache\") {\n      this.updateLastDiff({\n        result: result.data,\n        complete: true\n      }, this.getDiffOptions(options.variables));\n    } else if (cacheWriteBehavior !== 0 /* CacheWriteBehavior.FORBID */) {\n      if (shouldWriteResult(result, options.errorPolicy)) {\n        // Using a transaction here so we have a chance to read the result\n        // back from the cache before the watch callback fires as a result\n        // of writeQuery, so we can store the new diff quietly and ignore\n        // it when we receive it redundantly from the watch callback.\n        this.cache.performTransaction(function (cache) {\n          if (_this.shouldWrite(result, options.variables)) {\n            cache.writeQuery({\n              query: document,\n              data: result.data,\n              variables: options.variables,\n              overwrite: cacheWriteBehavior === 1 /* CacheWriteBehavior.OVERWRITE */\n            });\n            _this.lastWrite = {\n              result: result,\n              variables: options.variables,\n              dmCount: destructiveMethodCounts.get(_this.cache)\n            };\n          } else {\n            // If result is the same as the last result we received from\n            // the network (and the variables match too), avoid writing\n            // result into the cache again. The wisdom of skipping this\n            // cache write is far from obvious, since any cache write\n            // could be the one that puts the cache back into a desired\n            // state, fixing corruption or missing data. However, if we\n            // always write every network result into the cache, we enable\n            // feuds between queries competing to update the same data in\n            // incompatible ways, which can lead to an endless cycle of\n            // cache broadcasts and useless network requests. As with any\n            // feud, eventually one side must step back from the brink,\n            // letting the other side(s) have the last word(s). There may\n            // be other points where we could break this cycle, such as\n            // silencing the broadcast for cache.writeQuery (not a good\n            // idea, since it just delays the feud a bit) or somehow\n            // avoiding the network request that just happened (also bad,\n            // because the server could return useful new data). All\n            // options considered, skipping this cache write seems to be\n            // the least damaging place to break the cycle, because it\n            // reflects the intuition that we recently wrote this exact\n            // result into the cache, so the cache *should* already/still\n            // contain this data. If some other query has clobbered that\n            // data in the meantime, that's too bad, but there will be no\n            // winners if every query blindly reverts to its own version\n            // of the data. This approach also gives the network a chance\n            // to return new data, which will be written into the cache as\n            // usual, notifying only those queries that are directly\n            // affected by the cache updates, as usual. In the future, an\n            // even more sophisticated cache could perhaps prevent or\n            // mitigate the clobbering somehow, but that would make this\n            // particular cache write even less important, and thus\n            // skipping it would be even safer than it is today.\n            if (_this.lastDiff && _this.lastDiff.diff.complete) {\n              // Reuse data from the last good (complete) diff that we\n              // received, when possible.\n              result.data = _this.lastDiff.diff.result;\n              return;\n            }\n            // If the previous this.diff was incomplete, fall through to\n            // re-reading the latest data with cache.diff, below.\n          }\n          var diffOptions = _this.getDiffOptions(options.variables);\n          var diff = cache.diff(diffOptions);\n          // In case the QueryManager stops this QueryInfo before its\n          // results are delivered, it's important to avoid restarting the\n          // cache watch when markResult is called. We also avoid updating\n          // the watch if we are writing a result that doesn't match the current\n          // variables to avoid race conditions from broadcasting the wrong\n          // result.\n          if (!_this.stopped && equal(_this.variables, options.variables)) {\n            // Any time we're about to update this.diff, we need to make\n            // sure we've started watching the cache.\n            _this.updateWatch(options.variables);\n          }\n          // If we're allowed to write to the cache, and we can read a\n          // complete result from the cache, update result.data to be the\n          // result from the cache, rather than the raw network result.\n          // Set without setDiff to avoid triggering a notify call, since\n          // we have other ways of notifying for this result.\n          _this.updateLastDiff(diff, diffOptions);\n          if (diff.complete) {\n            result.data = diff.result;\n          }\n        });\n      } else {\n        this.lastWrite = void 0;\n      }\n    }\n  };\n  QueryInfo.prototype.markReady = function () {\n    this.networkError = null;\n    return this.networkStatus = NetworkStatus.ready;\n  };\n  QueryInfo.prototype.markError = function (error) {\n    var _a;\n    this.networkStatus = NetworkStatus.error;\n    this.lastWrite = void 0;\n    (_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a[\"resetNotifications\"]();\n    if (error.graphQLErrors) {\n      this.graphQLErrors = error.graphQLErrors;\n    }\n    if (error.networkError) {\n      this.networkError = error.networkError;\n    }\n    return error;\n  };\n  return QueryInfo;\n}();\nexport { QueryInfo };\nexport function shouldWriteResult(result, errorPolicy) {\n  if (errorPolicy === void 0) {\n    errorPolicy = \"none\";\n  }\n  var ignoreErrors = errorPolicy === \"ignore\" || errorPolicy === \"all\";\n  var writeWithErrors = !graphQLResultHasError(result);\n  if (!writeWithErrors && ignoreErrors && result.data) {\n    writeWithErrors = true;\n  }\n  return writeWithErrors;\n}","map":{"version":3,"names":["equal","DeepMerger","mergeIncrementalData","isNonEmptyArray","graphQLResultHasError","canUseWeakMap","NetworkStatus","destructiveMethodCounts","WeakMap","Map","wrapDestructiveCacheMethod","cache","methodName","original","set","get","apply","arguments","QueryInfo","queryManager","queryId","generateQueryId","document","lastRequestId","stopped","observableQuery","has","prototype","init","query","networkStatus","loading","variables","setVariables","lastDiff","cancel","Object","assign","networkError","graphQLErrors","setObservableQuery","resetDiff","getDiff","options","getDiffOptions","diff","updateWatch","oq","fetchPolicy","complete","updateLastDiff","returnPartialData","optimistic","canonizeResults","_a","setDiff","oldDiff","getLastError","result","_b","stop","stopPolling","cancelWatch","call","_this","watchOptions","__assign","watcher","callback","lastWatch","watch","resetLastWrite","lastWrite","shouldWrite","dmCount","data","markResult","cacheWriteBehavior","merger","errors","slice","incremental","mergedData","hasNext","merge","shouldWriteResult","errorPolicy","performTransaction","writeQuery","overwrite","diffOptions","markReady","ready","markError","error","ignoreErrors","writeWithErrors"],"sources":["C:\\Bootcamp\\mern-graphql-ecommerce\\client\\node_modules\\@apollo\\src\\core\\QueryInfo.ts"],"sourcesContent":["import type { DocumentNode, GraphQLFormattedError } from \"graphql\";\nimport { equal } from \"@wry/equality\";\n\nimport type { Cache, ApolloCache } from \"../cache/index.js\";\nimport { DeepMerger } from \"../utilities/index.js\";\nimport { mergeIncrementalData } from \"../utilities/index.js\";\nimport type { WatchQueryOptions, ErrorPolicy } from \"./watchQueryOptions.js\";\nimport type { ObservableQuery } from \"./ObservableQuery.js\";\nimport type { FetchResult } from \"../link/core/index.js\";\nimport {\n  isNonEmptyArray,\n  graphQLResultHasError,\n  canUseWeakMap,\n} from \"../utilities/index.js\";\nimport { NetworkStatus } from \"./networkStatus.js\";\nimport type { ApolloError } from \"../errors/index.js\";\nimport type { QueryManager } from \"./QueryManager.js\";\nimport type { Unmasked } from \"../masking/index.js\";\n\nexport type QueryStoreValue = Pick<\n  QueryInfo,\n  \"variables\" | \"networkStatus\" | \"networkError\" | \"graphQLErrors\"\n>;\n\nexport const enum CacheWriteBehavior {\n  FORBID,\n  OVERWRITE,\n  MERGE,\n}\n\nconst destructiveMethodCounts = new (canUseWeakMap ? WeakMap : Map)<\n  ApolloCache<any>,\n  number\n>();\n\nfunction wrapDestructiveCacheMethod(\n  cache: ApolloCache<any>,\n  methodName: \"evict\" | \"modify\" | \"reset\"\n) {\n  const original = cache[methodName];\n  if (typeof original === \"function\") {\n    // @ts-expect-error this is just too generic to be typed correctly\n    cache[methodName] = function () {\n      destructiveMethodCounts.set(\n        cache,\n        // The %1e15 allows the count to wrap around to 0 safely every\n        // quadrillion evictions, so there's no risk of overflow. To be\n        // clear, this is more of a pedantic principle than something\n        // that matters in any conceivable practical scenario.\n        (destructiveMethodCounts.get(cache)! + 1) % 1e15\n      );\n      // @ts-expect-error this is just too generic to be typed correctly\n      return original.apply(this, arguments);\n    };\n  }\n}\n\n// A QueryInfo object represents a single query managed by the\n// QueryManager, which tracks all QueryInfo objects by queryId in its\n// this.queries Map. QueryInfo objects store the latest results and errors\n// for the given query, and are responsible for reporting those results to\n// the corresponding ObservableQuery, via the QueryInfo.notify method.\n// Results are reported asynchronously whenever setDiff marks the\n// QueryInfo object as dirty, though a call to the QueryManager's\n// broadcastQueries method may trigger the notification before it happens\n// automatically. This class used to be a simple interface type without\n// any field privacy or meaningful methods, which is why it still has so\n// many public fields. The effort to lock down and simplify the QueryInfo\n// interface is ongoing, and further improvements are welcome.\nexport class QueryInfo {\n  document: DocumentNode | null = null;\n  lastRequestId = 1;\n  variables?: Record<string, any>;\n  networkStatus?: NetworkStatus;\n  networkError?: Error | null;\n  graphQLErrors?: ReadonlyArray<GraphQLFormattedError>;\n  stopped = false;\n\n  private cancelWatch?: () => void;\n  private cache: ApolloCache<any>;\n\n  constructor(\n    queryManager: QueryManager<any>,\n    public readonly queryId = queryManager.generateQueryId()\n  ) {\n    const cache = (this.cache = queryManager.cache);\n\n    // Track how often cache.evict is called, since we want eviction to\n    // override the feud-stopping logic in the markResult method, by\n    // causing shouldWrite to return true. Wrapping the cache.evict method\n    // is a bit of a hack, but it saves us from having to make eviction\n    // counting an official part of the ApolloCache API.\n    if (!destructiveMethodCounts.has(cache)) {\n      destructiveMethodCounts.set(cache, 0);\n      wrapDestructiveCacheMethod(cache, \"evict\");\n      wrapDestructiveCacheMethod(cache, \"modify\");\n      wrapDestructiveCacheMethod(cache, \"reset\");\n    }\n  }\n\n  public init(query: {\n    document: DocumentNode;\n    variables: Record<string, any> | undefined;\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus?: NetworkStatus;\n    observableQuery?: ObservableQuery<any, any>;\n    lastRequestId?: number;\n  }): this {\n    let networkStatus = query.networkStatus || NetworkStatus.loading;\n    if (\n      this.variables &&\n      this.networkStatus !== NetworkStatus.loading &&\n      !equal(this.variables, query.variables)\n    ) {\n      networkStatus = NetworkStatus.setVariables;\n    }\n\n    if (!equal(query.variables, this.variables)) {\n      this.lastDiff = void 0;\n      // Ensure we don't continue to receive cache updates for old variables\n      this.cancel();\n    }\n\n    Object.assign(this, {\n      document: query.document,\n      variables: query.variables,\n      networkError: null,\n      graphQLErrors: this.graphQLErrors || [],\n      networkStatus,\n    });\n\n    if (query.observableQuery) {\n      this.setObservableQuery(query.observableQuery);\n    }\n\n    if (query.lastRequestId) {\n      this.lastRequestId = query.lastRequestId;\n    }\n\n    return this;\n  }\n\n  resetDiff() {\n    this.lastDiff = void 0;\n  }\n\n  getDiff(): Cache.DiffResult<any> {\n    const options = this.getDiffOptions();\n\n    if (this.lastDiff && equal(options, this.lastDiff.options)) {\n      return this.lastDiff.diff;\n    }\n\n    this.updateWatch(this.variables);\n\n    const oq = this.observableQuery;\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return { complete: false };\n    }\n\n    const diff = this.cache.diff(options);\n    this.updateLastDiff(diff, options);\n    return diff;\n  }\n\n  private lastDiff?: {\n    diff: Cache.DiffResult<any>;\n    options: Cache.DiffOptions;\n  };\n\n  private updateLastDiff(\n    diff: Cache.DiffResult<any> | null,\n    options?: Cache.DiffOptions\n  ) {\n    this.lastDiff =\n      diff ?\n        {\n          diff,\n          options: options || this.getDiffOptions(),\n        }\n      : void 0;\n  }\n\n  private getDiffOptions(variables = this.variables): Cache.DiffOptions {\n    return {\n      query: this.document!,\n      variables,\n      returnPartialData: true,\n      optimistic: true,\n      canonizeResults: this.observableQuery?.options.canonizeResults,\n    };\n  }\n\n  setDiff(diff: Cache.DiffResult<any> | null) {\n    const oldDiff = this.lastDiff && this.lastDiff.diff;\n\n    // If we are trying to deliver an incomplete cache result, we avoid\n    // reporting it if the query has errored, otherwise we let the broadcast try\n    // and repair the partial result by refetching the query. This check avoids\n    // a situation where a query that errors and another succeeds with\n    // overlapping data does not report the partial data result to the errored\n    // query.\n    //\n    // See https://github.com/apollographql/apollo-client/issues/11400 for more\n    // information on this issue.\n    if (diff && !diff.complete && this.observableQuery?.getLastError()) {\n      return;\n    }\n\n    this.updateLastDiff(diff);\n\n    if (!equal(oldDiff && oldDiff.result, diff && diff.result)) {\n      this.observableQuery?.[\"scheduleNotify\"]();\n    }\n  }\n\n  public readonly observableQuery: ObservableQuery<any, any> | null = null;\n  setObservableQuery(oq: ObservableQuery<any, any> | null) {\n    if (oq === this.observableQuery) return;\n    (this as any).observableQuery = oq;\n    if (oq) {\n      oq[\"queryInfo\"] = this;\n    }\n  }\n\n  public stop() {\n    if (!this.stopped) {\n      this.stopped = true;\n\n      // Cancel the pending notify timeout\n      this.observableQuery?.[\"resetNotifications\"]();\n      this.cancel();\n\n      const oq = this.observableQuery;\n      if (oq) oq.stopPolling();\n    }\n  }\n\n  private cancel() {\n    this.cancelWatch?.();\n    this.cancelWatch = void 0;\n  }\n\n  private lastWatch?: Cache.WatchOptions;\n\n  private updateWatch(variables = this.variables) {\n    const oq = this.observableQuery;\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return;\n    }\n\n    const watchOptions: Cache.WatchOptions = {\n      // Although this.getDiffOptions returns Cache.DiffOptions instead of\n      // Cache.WatchOptions, all the overlapping options should be the same, so\n      // we can reuse getDiffOptions here, for consistency.\n      ...this.getDiffOptions(variables),\n      watcher: this,\n      callback: (diff) => this.setDiff(diff),\n    };\n\n    if (!this.lastWatch || !equal(watchOptions, this.lastWatch)) {\n      this.cancel();\n      this.cancelWatch = this.cache.watch((this.lastWatch = watchOptions));\n    }\n  }\n\n  private lastWrite?: {\n    result: FetchResult<any>;\n    variables: WatchQueryOptions[\"variables\"];\n    dmCount: number | undefined;\n  };\n\n  public resetLastWrite() {\n    this.lastWrite = void 0;\n  }\n\n  private shouldWrite(\n    result: FetchResult<any>,\n    variables: WatchQueryOptions[\"variables\"]\n  ) {\n    const { lastWrite } = this;\n    return !(\n      lastWrite &&\n      // If cache.evict has been called since the last time we wrote this\n      // data into the cache, there's a chance writing this result into\n      // the cache will repair what was evicted.\n      lastWrite.dmCount === destructiveMethodCounts.get(this.cache) &&\n      equal(variables, lastWrite.variables) &&\n      equal(result.data, lastWrite.result.data)\n    );\n  }\n\n  public markResult<T>(\n    result: FetchResult<T>,\n    document: DocumentNode,\n    options: Pick<\n      WatchQueryOptions,\n      \"variables\" | \"fetchPolicy\" | \"errorPolicy\"\n    >,\n    cacheWriteBehavior: CacheWriteBehavior\n  ) {\n    const merger = new DeepMerger();\n    const graphQLErrors =\n      isNonEmptyArray(result.errors) ? result.errors.slice(0) : [];\n\n    // Cancel the pending notify timeout (if it exists) to prevent extraneous network\n    // requests. To allow future notify timeouts, diff and dirty are reset as well.\n    this.observableQuery?.[\"resetNotifications\"]();\n\n    if (\"incremental\" in result && isNonEmptyArray(result.incremental)) {\n      const mergedData = mergeIncrementalData(this.getDiff().result, result);\n      result.data = mergedData;\n\n      // Detect the first chunk of a deferred query and merge it with existing\n      // cache data. This ensures a `cache-first` fetch policy that returns\n      // partial cache data or a `cache-and-network` fetch policy that already\n      // has full data in the cache does not complain when trying to merge the\n      // initial deferred server data with existing cache data.\n    } else if (\"hasNext\" in result && result.hasNext) {\n      const diff = this.getDiff();\n      result.data = merger.merge(diff.result, result.data);\n    }\n\n    this.graphQLErrors = graphQLErrors;\n\n    if (options.fetchPolicy === \"no-cache\") {\n      this.updateLastDiff(\n        { result: result.data, complete: true },\n        this.getDiffOptions(options.variables)\n      );\n    } else if (cacheWriteBehavior !== CacheWriteBehavior.FORBID) {\n      if (shouldWriteResult(result, options.errorPolicy)) {\n        // Using a transaction here so we have a chance to read the result\n        // back from the cache before the watch callback fires as a result\n        // of writeQuery, so we can store the new diff quietly and ignore\n        // it when we receive it redundantly from the watch callback.\n        this.cache.performTransaction((cache) => {\n          if (this.shouldWrite(result, options.variables)) {\n            cache.writeQuery({\n              query: document,\n              data: result.data as Unmasked<T>,\n              variables: options.variables,\n              overwrite: cacheWriteBehavior === CacheWriteBehavior.OVERWRITE,\n            });\n\n            this.lastWrite = {\n              result,\n              variables: options.variables,\n              dmCount: destructiveMethodCounts.get(this.cache),\n            };\n          } else {\n            // If result is the same as the last result we received from\n            // the network (and the variables match too), avoid writing\n            // result into the cache again. The wisdom of skipping this\n            // cache write is far from obvious, since any cache write\n            // could be the one that puts the cache back into a desired\n            // state, fixing corruption or missing data. However, if we\n            // always write every network result into the cache, we enable\n            // feuds between queries competing to update the same data in\n            // incompatible ways, which can lead to an endless cycle of\n            // cache broadcasts and useless network requests. As with any\n            // feud, eventually one side must step back from the brink,\n            // letting the other side(s) have the last word(s). There may\n            // be other points where we could break this cycle, such as\n            // silencing the broadcast for cache.writeQuery (not a good\n            // idea, since it just delays the feud a bit) or somehow\n            // avoiding the network request that just happened (also bad,\n            // because the server could return useful new data). All\n            // options considered, skipping this cache write seems to be\n            // the least damaging place to break the cycle, because it\n            // reflects the intuition that we recently wrote this exact\n            // result into the cache, so the cache *should* already/still\n            // contain this data. If some other query has clobbered that\n            // data in the meantime, that's too bad, but there will be no\n            // winners if every query blindly reverts to its own version\n            // of the data. This approach also gives the network a chance\n            // to return new data, which will be written into the cache as\n            // usual, notifying only those queries that are directly\n            // affected by the cache updates, as usual. In the future, an\n            // even more sophisticated cache could perhaps prevent or\n            // mitigate the clobbering somehow, but that would make this\n            // particular cache write even less important, and thus\n            // skipping it would be even safer than it is today.\n            if (this.lastDiff && this.lastDiff.diff.complete) {\n              // Reuse data from the last good (complete) diff that we\n              // received, when possible.\n              result.data = this.lastDiff.diff.result;\n              return;\n            }\n            // If the previous this.diff was incomplete, fall through to\n            // re-reading the latest data with cache.diff, below.\n          }\n\n          const diffOptions = this.getDiffOptions(options.variables);\n          const diff = cache.diff<T>(diffOptions);\n\n          // In case the QueryManager stops this QueryInfo before its\n          // results are delivered, it's important to avoid restarting the\n          // cache watch when markResult is called. We also avoid updating\n          // the watch if we are writing a result that doesn't match the current\n          // variables to avoid race conditions from broadcasting the wrong\n          // result.\n          if (!this.stopped && equal(this.variables, options.variables)) {\n            // Any time we're about to update this.diff, we need to make\n            // sure we've started watching the cache.\n            this.updateWatch(options.variables);\n          }\n\n          // If we're allowed to write to the cache, and we can read a\n          // complete result from the cache, update result.data to be the\n          // result from the cache, rather than the raw network result.\n          // Set without setDiff to avoid triggering a notify call, since\n          // we have other ways of notifying for this result.\n          this.updateLastDiff(diff, diffOptions);\n          if (diff.complete) {\n            result.data = diff.result;\n          }\n        });\n      } else {\n        this.lastWrite = void 0;\n      }\n    }\n  }\n\n  public markReady() {\n    this.networkError = null;\n    return (this.networkStatus = NetworkStatus.ready);\n  }\n\n  public markError(error: ApolloError) {\n    this.networkStatus = NetworkStatus.error;\n    this.lastWrite = void 0;\n\n    this.observableQuery?.[\"resetNotifications\"]();\n\n    if (error.graphQLErrors) {\n      this.graphQLErrors = error.graphQLErrors;\n    }\n\n    if (error.networkError) {\n      this.networkError = error.networkError;\n    }\n\n    return error;\n  }\n}\n\nexport function shouldWriteResult<T>(\n  result: FetchResult<T>,\n  errorPolicy: ErrorPolicy = \"none\"\n) {\n  const ignoreErrors = errorPolicy === \"ignore\" || errorPolicy === \"all\";\n  let writeWithErrors = !graphQLResultHasError(result);\n  if (!writeWithErrors && ignoreErrors && result.data) {\n    writeWithErrors = true;\n  }\n  return writeWithErrors;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}