{"ast":null,"code":"import { Trie } from \"@wry/trie\";\nimport { canUseWeakMap } from \"../../../utilities/index.js\";\nimport { InternalQueryReference } from \"./QueryReference.js\";\nimport { FragmentReference } from \"./FragmentReference.js\";\nvar SuspenseCache = /** @class */function () {\n  function SuspenseCache(options) {\n    if (options === void 0) {\n      options = Object.create(null);\n    }\n    this.queryRefs = new Trie(canUseWeakMap);\n    this.fragmentRefs = new Trie(canUseWeakMap);\n    this.options = options;\n  }\n  SuspenseCache.prototype.getQueryRef = function (cacheKey, createObservable) {\n    var ref = this.queryRefs.lookupArray(cacheKey);\n    if (!ref.current) {\n      ref.current = new InternalQueryReference(createObservable(), {\n        autoDisposeTimeoutMs: this.options.autoDisposeTimeoutMs,\n        onDispose: function () {\n          delete ref.current;\n        }\n      });\n    }\n    return ref.current;\n  };\n  SuspenseCache.prototype.getFragmentRef = function (cacheKey, client, options) {\n    var ref = this.fragmentRefs.lookupArray(cacheKey);\n    if (!ref.current) {\n      ref.current = new FragmentReference(client, options, {\n        autoDisposeTimeoutMs: this.options.autoDisposeTimeoutMs,\n        onDispose: function () {\n          delete ref.current;\n        }\n      });\n    }\n    return ref.current;\n  };\n  SuspenseCache.prototype.add = function (cacheKey, queryRef) {\n    var ref = this.queryRefs.lookupArray(cacheKey);\n    ref.current = queryRef;\n  };\n  return SuspenseCache;\n}();\nexport { SuspenseCache };","map":{"version":3,"names":["Trie","canUseWeakMap","InternalQueryReference","FragmentReference","SuspenseCache","options","Object","create","queryRefs","fragmentRefs","prototype","getQueryRef","cacheKey","createObservable","ref","lookupArray","current","autoDisposeTimeoutMs","onDispose","getFragmentRef","client","add","queryRef"],"sources":["C:\\bootcamp\\PICKFORD---LACE\\client\\node_modules\\@apollo\\src\\react\\internal\\cache\\SuspenseCache.ts"],"sourcesContent":["import { Trie } from \"@wry/trie\";\nimport type {\n  ApolloClient,\n  ObservableQuery,\n  WatchFragmentOptions,\n} from \"../../../core/index.js\";\nimport { canUseWeakMap } from \"../../../utilities/index.js\";\nimport { InternalQueryReference } from \"./QueryReference.js\";\nimport type { CacheKey, FragmentCacheKey } from \"./types.js\";\nimport { FragmentReference } from \"./FragmentReference.js\";\n\nexport interface SuspenseCacheOptions {\n  /**\n   * Specifies the amount of time, in milliseconds, the suspense cache will wait\n   * for a suspended component to read from the suspense cache before it\n   * automatically disposes of the query. This prevents memory leaks when a\n   * component unmounts before a suspended resource finishes loading. Increase\n   * the timeout if your queries take longer than than the specified time to\n   * prevent your queries from suspending over and over.\n   *\n   * Defaults to 30 seconds.\n   */\n  autoDisposeTimeoutMs?: number;\n}\n\nexport class SuspenseCache {\n  private queryRefs = new Trie<{ current?: InternalQueryReference }>(\n    canUseWeakMap\n  );\n  private fragmentRefs = new Trie<{ current?: FragmentReference }>(\n    canUseWeakMap\n  );\n\n  private options: SuspenseCacheOptions;\n\n  constructor(options: SuspenseCacheOptions = Object.create(null)) {\n    this.options = options;\n  }\n\n  getQueryRef<TData = any>(\n    cacheKey: CacheKey,\n    createObservable: () => ObservableQuery<TData>\n  ) {\n    const ref = this.queryRefs.lookupArray(cacheKey) as {\n      current?: InternalQueryReference<TData>;\n    };\n\n    if (!ref.current) {\n      ref.current = new InternalQueryReference(createObservable(), {\n        autoDisposeTimeoutMs: this.options.autoDisposeTimeoutMs,\n        onDispose: () => {\n          delete ref.current;\n        },\n      });\n    }\n\n    return ref.current;\n  }\n\n  getFragmentRef<TData, TVariables>(\n    cacheKey: FragmentCacheKey,\n    client: ApolloClient<any>,\n    options: WatchFragmentOptions<TData, TVariables> & { from: string }\n  ) {\n    const ref = this.fragmentRefs.lookupArray(cacheKey) as {\n      current?: FragmentReference<TData, TVariables>;\n    };\n\n    if (!ref.current) {\n      ref.current = new FragmentReference(client, options, {\n        autoDisposeTimeoutMs: this.options.autoDisposeTimeoutMs,\n        onDispose: () => {\n          delete ref.current;\n        },\n      });\n    }\n\n    return ref.current;\n  }\n\n  add(cacheKey: CacheKey, queryRef: InternalQueryReference<unknown>) {\n    const ref = this.queryRefs.lookupArray(cacheKey);\n    ref.current = queryRef;\n  }\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,WAAW;AAMhC,SAASC,aAAa,QAAQ,6BAA6B;AAC3D,SAASC,sBAAsB,QAAQ,qBAAqB;AAE5D,SAASC,iBAAiB,QAAQ,wBAAwB;AAgB1D,IAAAC,aAAA;EAUE,SAAAA,cAAYC,OAAmD;IAAnD,IAAAA,OAAA;MAAAA,OAAA,GAAgCC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;IAAA;IATvD,KAAAC,SAAS,GAAG,IAAIR,IAAI,CAC1BC,aAAa,CACd;IACO,KAAAQ,YAAY,GAAG,IAAIT,IAAI,CAC7BC,aAAa,CACd;IAKC,IAAI,CAACI,OAAO,GAAGA,OAAO;EACxB;EAEAD,aAAA,CAAAM,SAAA,CAAAC,WAAW,GAAX,UACEC,QAAkB,EAClBC,gBAA8C;IAE9C,IAAMC,GAAG,GAAG,IAAI,CAACN,SAAS,CAACO,WAAW,CAACH,QAAQ,CAE9C;IAED,IAAI,CAACE,GAAG,CAACE,OAAO,EAAE;MAChBF,GAAG,CAACE,OAAO,GAAG,IAAId,sBAAsB,CAACW,gBAAgB,EAAE,EAAE;QAC3DI,oBAAoB,EAAE,IAAI,CAACZ,OAAO,CAACY,oBAAoB;QACvDC,SAAS,EAAE,SAAAA,CAAA;UACT,OAAOJ,GAAG,CAACE,OAAO;QACpB;OACD,CAAC;IACJ;IAEA,OAAOF,GAAG,CAACE,OAAO;EACpB,CAAC;EAEDZ,aAAA,CAAAM,SAAA,CAAAS,cAAc,GAAd,UACEP,QAA0B,EAC1BQ,MAAyB,EACzBf,OAAmE;IAEnE,IAAMS,GAAG,GAAG,IAAI,CAACL,YAAY,CAACM,WAAW,CAACH,QAAQ,CAEjD;IAED,IAAI,CAACE,GAAG,CAACE,OAAO,EAAE;MAChBF,GAAG,CAACE,OAAO,GAAG,IAAIb,iBAAiB,CAACiB,MAAM,EAAEf,OAAO,EAAE;QACnDY,oBAAoB,EAAE,IAAI,CAACZ,OAAO,CAACY,oBAAoB;QACvDC,SAAS,EAAE,SAAAA,CAAA;UACT,OAAOJ,GAAG,CAACE,OAAO;QACpB;OACD,CAAC;IACJ;IAEA,OAAOF,GAAG,CAACE,OAAO;EACpB,CAAC;EAEDZ,aAAA,CAAAM,SAAA,CAAAW,GAAG,GAAH,UAAIT,QAAkB,EAAEU,QAAyC;IAC/D,IAAMR,GAAG,GAAG,IAAI,CAACN,SAAS,CAACO,WAAW,CAACH,QAAQ,CAAC;IAChDE,GAAG,CAACE,OAAO,GAAGM,QAAQ;EACxB,CAAC;EACH,OAAAlB,aAAC;AAAD,CAAC,CA3DD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}